/* global __dirname, require, module*/

const UglifyJsPlugin = require('uglifyjs-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const path = require('path');
const env = require('yargs').argv.env; 
// contains externals function that ignores node_modules when bundling in Webpack
const nodeExternals = require('webpack-node-externals');

let plugins = [];
if (env === 'build') {
  plugins.push(new UglifyJsPlugin({ minimize: true,
    test: /\.js($|\?)/i,
    sourceMap: true,
     uglifyOptions: {
          mangle: {
            keep_fnames: true,
          },
          compress: {
            warnings: false,
          },
          output: {
            beautify: false,
          },
        }
   }, 
   ),
    new CopyWebpackPlugin([{
      from: 'lib/index.js',
      to: './',
      transform: function (content, path) {
        return content.toString().replace(/.js/g, '.min.js')
      }
    }])
  );
}

const config = {
  entry: {
    osDetection : __dirname + '/lib/osDetection.js',
    autocomplete : __dirname + '/lib/autocomplete.js',
    themes : __dirname + '/lib/themes.js', 
    themeService : __dirname + '/lib/themeService.js' ,
    appUtils : __dirname + '/lib/appUtils.js',
  },
  devtool: 'source-map',
  output: {
    path: __dirname + '/dist',
    filename: '[name].min.js',
    libraryTarget: 'umd',
    umdNamedDefine: true
  },
  module: {
    rules: [
      {
        test: /(\.jsx|\.js)$/,
        loader: 'babel-loader',
        exclude: /(node_modules|bower_components)/
      },
      {
        test: /(\.jsx|\.js)$/,
        loader: 'eslint-loader',
        exclude: /node_modules/
      }
    ]
  },
  resolve: {
    modules: [path.resolve('./node_modules'), path.resolve('./src')],
    extensions: ['.json', '.js']
  },
  plugins: plugins,
  externals: nodeExternals() // in order to avoid bundling of modules in node_modules folder 
};

module.exports = config;