import { themes } from './themes.js';

export class ThemeService {
	constructor () {
		this.activeTheme = undefined;
		this.themesConfig = this.initThemes(themes);
	}

	/* Get all the available themes present in the library */
	getAllThemes() {
		return this.themesConfig.themes;
	}

	/* Get the currently applied theme details */
	getActiveTheme() {
		return this.activeTheme || this.activateTheme();
	}

	/* Get the default theme details which is present in themes config */
	getDefaultTheme() {
    	return this.themesConfig.themes[this.themesConfig.defaultThemeCode];
	}

	/* - create a map of theme(@key - theme code; @value - theme details)
	   - set any theme as default theme */
	initThemes(themes) {
		let themesObject = {
			"defaultThemeCode": undefined,
			"themes" : {}
		};
		themes.forEach(function(theme) {
			themesObject.themes[theme.meta.code] = theme;
		});
		themesObject.defaultThemeCode = "theme-adult";

		return themesObject;
	}

	/* @params - themeCode (can be found in 'themes.js' file as 'code' property inside every theme)
	set the passed theme as active theme (if not passed or incorrect code, default theme will be set as active) */
	activateTheme(themeCode, ignoreLocalStorage = false) {

		// check if given themeCode is valid and set it
	    if(themeCode && this.themesConfig.themes[themeCode]) {
            this.activeTheme = this.themesConfig.themes[themeCode];
		}

		// check if a theme value exists in localstorage and is a valid entry and use it
		else if (localStorage.getItem('cup-global-theme') !== null && localStorage.getItem('cup-global-theme') !== "" && this.themesConfig.themes[localStorage.getItem('cup-global-theme')]) {
            this.activeTheme = this.themesConfig.themes[localStorage.getItem('cup-global-theme')];
		}

		// set default theme if no theme found or wrong theme found
		else {
            this.activeTheme = this.themesConfig.themes[this.themesConfig.defaultThemeCode];
		}
		
		//console.log("Activated theme : " + this.activeTheme.meta.code);
        if(!ignoreLocalStorage) {
            localStorage.setItem('cup-global-theme', this.activeTheme.meta.code);
        }
		var that = this;
		Object.keys(this.themesConfig.themes[this.activeTheme.meta.code].properties).forEach(function(property) {
            document.documentElement.style.setProperty(property, that.themesConfig.themes[that.activeTheme.meta.code].properties[property]);
            if(that.isValidHex(that.themesConfig.themes[that.activeTheme.meta.code].properties[property])) {
                document.documentElement.style.setProperty(property+"-rgb", that.hexToRGB(that.themesConfig.themes[that.activeTheme.meta.code].properties[property]));
            }
		});
	    return this.activeTheme;
	}

	/*	-	calculate a theme based on some business logic
		- 	currently it is randomly set
		-	set the calulated theme to local storage
		-	called once when logging in
	*/
	calculateTheme() {
		var index = Math.round(Math.random()*23)%3;
        var t = ["theme-adult","theme-primary","theme-secondary"];
		var tempTheme = this.themesConfig.themes[t[index]];
		localStorage.setItem('cup-global-theme', tempTheme.meta.code);
	}

	/*	-	reset theme to default theme
		-	called when logging out
	*/
	resetThemeToDefault() {
		var defaultTheme = this.getDefaultTheme();
        localStorage.setItem('cup-global-theme', defaultTheme.meta.code);
    }
    
    isValidHex(hex) {
        if(hex.match(/^#[0-9A-F]{6}$/i)) {
            return true;
        }
        return false;
    }

    hexToRGB(hex) {
        var arr = ['0x' + hex[1] + hex[2] | 0, '0x' + hex[3] + hex[4] | 0, '0x' + hex[5] + hex[6] | 0];
        return arr[0] + ", " + arr[1] + ", " + arr[2];
    }

}