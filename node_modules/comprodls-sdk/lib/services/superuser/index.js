/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/

/***********************************************************
 * comproDLS SDK AUTH API Adaptor
 * Functions for calling AUTH API.
 ************************************************************/

var q = require('q');
var request = require('superagent');

var helpers = require('../../helpers');

var DLSError = helpers.errors.DLSError;

/*********************************
 * Setting Up Module Entry Point
 **********************************/
module.exports = superuser;

//Superuser Adaptor Contsructor
function superuser(accountId) {
    this.accountId = accountId;
    return {
      getAllInstitutions: getAllInstitutions.bind(this),
      getInstitution: getInstitution.bind(this),
      provisionSpacesToSuperAdmin: provisionSpacesToSuperAdmin.bind(this)
    };
  }
  
  /*options = {
    "lookup": "string",
    "limit": "integer",
    "cursor": "object"
  }*/
function getAllInstitutions(options) {
  var self = this;
  // Initializing promise
  var dfd = q.defer();

  var url = self.config.DEFAULT_HOSTS.AUTH +
            self.config.AUTH_API_URLS.getAllInstitutions;
  url = helpers.api.constructAPIUrl(url, { accountid : self.accountId });

  var params = {};
  if(options) {
    if(options.lookup) { params.lookup = options.lookup; }
    if(options.cursor) { params.cursor = options.cursor; }
    if(options.limit) { params.limit = options.limit; }
  }

  //Setup request with URL and Params
  var requestAPI = request.get(url).query(params);
  if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

  requestAPI.end(function(err, response) {
    if(err) {
        err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
        dfd.reject(err);
    } else {
        dfd.resolve(response.body);
    }
  });

  return dfd.promise;
}
  
  /** This function gets a particular Instituion using the unique identifier (space_code)
   *  options = { "spacecode" : "string" }
   */
function getInstitution(options) {
  var self = this;
  // Initializing promise
  var dfd = q.defer();
  
  // Validations
  if(options && options.spacecode) {
    // Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS.AUTH + self.config.AUTH_API_URLS.getInstitution;
    url = helpers.api.constructAPIUrl(url, {
      accountid: self.accountId, spacecode: options.spacecode
    });

    // Setup request with URL and Params
    var requestAPI = request.get(url);
    if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

    requestAPI.end(function(error, response) {
      if(error) {
        err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, error);
        dfd.reject(err);
      }
      else { dfd.resolve(response.body); }
    });
  } 
  else {
    var err = {};
    err.message = err.description = 'spacecode not found in request options.';
    err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
    dfd.reject(err);
  }
  return dfd.promise;
}

/**
 * This will provision space to the super admin in shared/institutional org.
 * Note: The super admin can only be provisioned in one (shared/institutional) org at a time.
 *
 * @param {Object} options {
    "ext_user_id": "string",
    "ext_role": "string",
    "ext_email": "string",
    "ext_first_name": "string",
    "ext_last_name": "string",
    "address": { "country": "string" }   // optional
    "space_code": "string",              // optional, to provision the superadmin in institutional space.
    "private_space": boolean             // optional, to provision the superadmin in shared space.
  }
 * @return {Promise} Promise.resolve({ entities:[ { spaces object }], count: entities.length })
 */
function provisionSpacesToSuperAdmin(options) {
  var self = this;
  // Initializing promise
  var dfd = q.defer();

  if(options && options.ext_user_id &&
      options.ext_role && options.ext_email &&
      options.ext_first_name && options.ext_last_name)
  {
    // Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS.AUTH +
              self.config.AUTH_API_URLS.provisionSpacesToSuperAdmin;
    url = helpers.api.constructAPIUrl(url, { accountid : self.accountId });

    // Setup request with URL and Params
    var requestAPI = request.post(url)
    .set('Content-Type', 'application/json')
    .set('Accept', 'application/json')
    .send(options);
    if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

    requestAPI.end(function(error, response) {
      if(error) {
        err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, error);
        dfd.reject(err);
      }
      else { dfd.resolve(response.body); }
    });
  }
  else {
    var err = {};
    err.message = err.description = 'Missing required input data';
    err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
    dfd.reject(err);
  }

  return dfd.promise;
}
