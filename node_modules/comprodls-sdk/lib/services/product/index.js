/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/
/***********************************************************
 * comproDLS SDK Product API Adaptor
 * Functions for calling Product API.
 ************************************************************/
var request = require('superagent');
var q = require('q');

var helpers = require('../../helpers');
var DLSError = helpers.errors.DLSError;

/*********************************
 * Setting Up Module Entry Point
 **********************************/
module.exports = product;

function product(accountId) {
    this.accountId = accountId;
    return {
        getProduct: getProduct.bind(this),
        getGlobalEntitlementsForAUser: getGlobalEntitlementsForAUser.bind(this),
        getMicroEntitlementsForAUser: getMicroEntitlementsForAUser.bind(this),

        getAllBundles: getAllBundles.bind(this),
        getSingleBundle: getSingleBundle.bind(this),

        getSingleProductFamily: getSingleProductFamily.bind(this),
        getAllProductFamilies: getAllProductFamilies.bind(this)
    };
}

/*********************************
 * Public Function definitions
 **********************************/

//options = {
//	productcode: '', //productcode of product
//	details: boolean, // (optional)
//  stage: string // (optional, ['1', '2', 'final']), default - final
//}
function getProduct(options) {
    var dfd = q.defer();
	var self = this;
    var err = {};

	if(options && options.productcode) {
        //Passed all validations, Construct API url
        var url = self.config.DEFAULT_HOSTS['PRODUCT'] +
            self.config.PRODUCT_API_URLS.getProductAPI;
        url = helpers.api.constructAPIUrl(url, {
            accountId: self.accountId,
            productCode: options.productcode
        });

        //Construct parameters
        var params = {};
        if(options.details) {
            params.details = options.details;
        }
        if(options.stage) {
            params.stage = options.stage;
        }
        //Setup request with URL and Params
        var requestAPI = request.get(url).query(params);
        if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

        //Call GET All Products Source Api
        requestAPI.end(function(err, response) {
            if (err) {
                err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
                dfd.reject(err);
            } else {
                dfd.resolve(response.body);
            }
        });
    }
    else {
		err.message = err.description = 'productcode not found in request options';
		err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
		dfd.reject(err);
	}

    return dfd.promise;
}

// options : { extUserId, productDetails, bundleDetails }
function getGlobalEntitlementsForAUser(options) {
  var self = this;

  //Initializing promise
  var dfd = q.defer();

  if(options && options.extUserId) {
    //Passed all validations, Construct API url
    var url = self.config.DEFAULT_HOSTS.PRODUCT +
                                    self.config.PRODUCT_API_URLS.getEntitlementsOfAUser;
    url = helpers.api.constructAPIUrl(url,
                        { accountId : self.accountId, extUserId : options.extUserId });

    //Contruct parameters
    var query = {};
    if(options.productDetails) { query.productDetails = options.productDetails; }
    if(options.bundleDetails) { query.bundleDetails = options.bundleDetails; }

    //Setup request with URL and Params
    var requestAPI = request.get(url).query(query);
    if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

    //Call GET ALL USER Api
    requestAPI.end(function(err, response) {
      if (err) {
        err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
        dfd.reject(err);
      }
      else { dfd.resolve(response.body); }
    });
  }
  else {
    var err = {};
    err.message = err.description = 'Mandatory parameter extUserId not found in request options';
    err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
    dfd.reject(err);
  }
  return dfd.promise;

}

/*options : {
    extuserid,    //mandatory
    productcode,  //mandatory
    context,      //optional
    feature_key,  //optional
    cursor        //optional
  }
*/
function getMicroEntitlementsForAUser(options) {
  var self = this;

  //Initializing promise
  var dfd = q.defer();

  if(options && options.extuserid && options.productcode ) {
    //Passed all validations, Construct API url
    var url = self.config.DEFAULT_HOSTS.PRODUCT +
                                    self.config.PRODUCT_API_URLS.getMicroEntitlementsOfAUser;
    url = helpers.api.constructAPIUrl(url,
                        { accountId : self.accountId, extUserId : options.extuserid });

    //Contruct parameters
    var query = {};
    query.productcode = options.productcode;
    if (options.context) { query.context = options.context; }
    if (options.feature_key) { query.feature_key = options.feature_key; }
    if (options.cursor) { query.cursor = options.cursor; }

    //Setup request with URL and Params
    var requestAPI = request.get(url).query(query);
    if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

    //Call Get All User Micro Entitlements Api
    requestAPI.end(function(err, response) {
      if (err) {
        err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
        dfd.reject(err);
      }
      else { dfd.resolve(response.body); }
    });
  }
  else {
    var err = {};
    err.message = err.description = 'Mandatory parameter extuserid or productcode' +
                                    'not found in request options';
    err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
    dfd.reject(err);
  }
  return dfd.promise;

}

// options= {
//  stage: "",          //stage number or version
// }
function getAllBundles(options) {
    var self = this;
    var dfd = q.defer();

  //Passed all validations, Construct API url
  var url = self.config.DEFAULT_HOSTS.PRODUCT + self.config.PRODUCT_API_URLS.getAllBundles;

  url = helpers.api.constructAPIUrl(url, { accountId : self.accountId });
  //Contruct parameters
  var params = {};
  if(options && options.stage) { params.stage = options.stage; }

  //Setup request with URL and Post data
  var requestAPI = request.get(url).query(params);
  if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

  requestAPI.end(function (err, response) {
    if(err) {
      err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
      dfd.reject(err);
    } else {
      dfd.resolve(response.body);
    }
  });

  return dfd.promise;
}

// options = {
//   'bundle-code': "",   //bundle identifier
//   stage: "",           //stage number/version
// }
function getSingleBundle(options) {
  var self = this;
  var dfd = q.defer();
  var err;


  if(options && options['bundle-code']) {

    var url = self.config.DEFAULT_HOSTS.PRODUCT + self.config.PRODUCT_API_URLS.getSingleBundle;

    url = helpers.api.constructAPIUrl(url, { accountId : self.accountId, bundleCode: options['bundle-code'] });
    //Contruct parameters
    var params = {};
    if(options.stage) { params.stage = options.stage; }
    //Setup request with URL and Post data

    var requestAPI = request.get(url).query(params);
    if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

    requestAPI.end(function (err, response) {
      if(err) {
        err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
        dfd.reject(err);
      } else {
        dfd.resolve(response.body);
      }
    });
  }
  else {
    err = {};
    err.message = err.description = 'Required parameter bundle-code not found in request options';
    err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
    dfd.reject(err);
  }


  return dfd.promise;
}

// options= {
//  stage: "",          //stage number
// }
function getAllProductFamilies(options) {
  var self = this;
  var dfd = q.defer();

  //Passed all validations, Construct API url
  var url = self.config.DEFAULT_HOSTS.PRODUCT + self.config.PRODUCT_API_URLS.getAllProductFamilies;

  url = helpers.api.constructAPIUrl(url, { accountId: self.accountId });
  //Contruct parameters
  var params = {};
  if (options && options.stage) { params.stage = options.stage; }

  //Setup request with URL and Post data
  var requestAPI = request.get(url).query(params);
  if (self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

  requestAPI.end(function (err, response) {
    if (err) {
      err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
      dfd.reject(err);
    } else {
      dfd.resolve(response.body);
    }
  });

  return dfd.promise;
}

// options = {
//   'family-code': "",   //product-family identifier
//    stage: "",          //stage number
// }
function getSingleProductFamily(options) {
  var self = this;
  var dfd = q.defer();
  var err;

  if (options && options['family-code']) {

    var url = self.config.DEFAULT_HOSTS.PRODUCT +
      self.config.PRODUCT_API_URLS.getSingleProductFamily;

    url = helpers.api.constructAPIUrl(url, {
      accountId: self.accountId, familyCode: options['family-code']
    });

    //Contruct parameters
    var params = {};
    if (options.stage) { params.stage = options.stage; }

    //Setup request with URL and Post data
    var requestAPI = request.get(url).query(params);
    if (self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

    requestAPI.end(function (err, response) {
      if (err) {
        err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
        dfd.reject(err);
      } else {
        dfd.resolve(response.body);
      }
    });
  }
  else {
    err = {};
    err.message = err.description = 'Required parameter family-code not found in request options';
    err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
    dfd.reject(err);
  }

  return dfd.promise;
}
