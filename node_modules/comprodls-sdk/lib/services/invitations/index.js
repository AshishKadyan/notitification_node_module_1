/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/

/***********************************************************
 * comproDLS SDK AUTH API Adaptor
 * Functions for calling AUTH API.
 ************************************************************/

var q = require('q');
var request = require('superagent');

var helpers = require('../../helpers');

var DLSError = helpers.errors.DLSError;

/*********************************
 * Setting Up Module Entry Point
 **********************************/
module.exports = invitations;

//Invitations Adaptor Constructor
function invitations() {

  return {
    sendInvitations: sendInvitations.bind(this),
    getMultiInvitations: getMultiInvitations.bind(this),
    revokeSingleInvitation: revokeSingleInvitation.bind(this),
    completeSingleInvitation: completeSingleInvitation.bind(this),
    resendSingleInvitation: resendSingleInvitation.bind(this)
  };
}

/*options = {
    context: 'string',  // required
    created: 'string',  // required
    space_title: 'string',
    class_enrollment: {
      classid: 'string',       // required. Correlated with context
      class_role: 'string',    // optional
      inviter_email: 'string'  // optional
    },
    invitation_data: [
      {
        class_enrollment  : {       // optional, will override the outer context
          classid: 'string'         // required. Correlated with context
          class_role: 'string',     // optional
          inviter_email: 'string'   // optional
        },
        email: 'string',   // required
        dls_account_status: 'string',
        ext_account_status: 'string',
        userid: 'string',
        ext_user_id: 'string',
        first_name: 'string',  // required
        last_name: 'string',   // required
        ext_data: {},
        rowId: 'string',       // required
        role: 'string'        /// required
      },...
    ]
  }*/
function sendInvitations(options) {
  var self = this;
  var dfd = q.defer();
  var err = helpers.validations.isAuthenticated(self.orgId, self.token);
  if(err) { dfd.reject(err); }
  else {
    if (options && options.context && options.created && options['invitation_data']) {
      // Passed all validations, Contruct API url
      var url = self.config.DEFAULT_HOSTS.AUTH + self.config.AUTH_API_URLS.sendInvitations;
      url = helpers.api.constructAPIUrl(url, { orgId: self.orgId });
      // Setup request with URL and Params
      var requestAPI = request.post(url)
      .set('Content-Type', 'application/json')
      .set('Accept', 'application/json')
      .send(options);

      //Setup token in Authorization header
      requestAPI = helpers.api.setupAPIToken(requestAPI, self.token);
      if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

      requestAPI.end(function (error, response) {
        if (error) {
          err = {};
          err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, error);
          dfd.reject(err);
        }
        else {
          dfd.resolve(response.body);
        }
      });
    }
    else {
      err = {};
      err.message = err.description = 'One or more required field(s) missing: context, created or '+
      'invitation_data';
      err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
      dfd.reject(err);
    }
  }
  return dfd.promise;
}

/* options = {
   "context_id": "string", // required
    "context" : "string", //context for invitation e.g. class_enrollment -required
    "status" : "string", // ['pending','complete','revoke'] -required
    "cursor" : "string", // optional
  };
*/
function getMultiInvitations(options) {
  var self = this;
  // Initializing promise
  var dfd = q.defer();
  var err = helpers.validations.isAuthenticated(self.orgId, self.token);
  if(err) { dfd.reject(err); }
  else {
    if (options && options.context_id) {

      // Passed all validations, Contruct API url
      var url = self.config.DEFAULT_HOSTS.AUTH + self.config.AUTH_API_URLS.getMultiInvitations;
      url = helpers.api.constructAPIUrl(url, { orgId: self.orgId });

      var queryParam = { context_id: options.context_id };
      if (options.context) { queryParam.context =  options.context; }
      if (options.status) { queryParam.status = options.status; }
      if (options.cursor) { queryParam.cursor = options.cursor; }

      // Setup request with URL and Params
      var requestAPI = request.get(url).query(queryParam);

      //Setup token in Authorization header
      requestAPI = helpers.api.setupAPIToken(requestAPI, self.token);
      if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

      requestAPI.end(function (error, response) {
        if (error) {
          err = {};
          err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, error);
          dfd.reject(err);
        }
        else {
          dfd.resolve(response.body);
        }
      });
    }
    else {
      err = {};
      err.message = err.description = 'context_id not found in request options.';
      err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
      dfd.reject(err);
    }
  }
  return dfd.promise;
}

/* options = {
    "context_id": "string", //class id to be to be revoked invitation -required
    "invitationid" : "string", //unique invitation id which is to be fetched -required
    "context" : "string", //context for revoking invitation e.g. class_enrollment -required
  };
*/
function revokeSingleInvitation(options) {
  var self = this;
  // Initializing promise
  var dfd = q.defer();

  var err = helpers.validations.isAuthenticated(self.orgId, self.token);
  if(err) { dfd.reject(err); }
  else {
    if (options && options.context_id && options.invitationid && options.context) {
      // Passed all validations, Contruct API url
      var url = self.config.DEFAULT_HOSTS.AUTH + self.config.AUTH_API_URLS.revokeSingleInvitation;
      url = helpers.api.constructAPIUrl(url, { orgId: self.orgId, invitationid: options.invitationid });

      var queryParam = { context: options.context, context_id: options.context_id };

      // Setup request with URL and Params
      var requestAPI = request.delete(url).query(queryParam);

      //Setup token in Authorization header
      requestAPI = helpers.api.setupAPIToken(requestAPI, self.token);
      if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

      requestAPI.end(function (error, response) {
        if (error) {
          err = {};
          err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, error);
          dfd.reject(err);
        }
        else {
          dfd.resolve(response.body);
        }
      });
    }
    else {
      err = {};
      err.message = err.description = 'context_id or context or invitationid not found in request options.';
      err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
      dfd.reject(err);
    }
  }
  return dfd.promise;
}

/* options= {
   "context_id": "string", //class id tocomplete an invitation -required
    "invitationid" : "string", //unique invitation id which is to be fetched -required
    "context" : "string", //context of the invitation to be completed e.g. class_enrollment -required
  };
*/
function completeSingleInvitation(options) {
  var self = this;
  // Initializing promise
  var dfd = q.defer();
  var err = helpers.validations.isAuthenticated(self.orgId, self.token);
  if(err) { dfd.reject(err); }
  else {
    if (options && options.context_id && options.invitationid && options.context) {
      // Passed all validations, Contruct API url
      var url = self.config.DEFAULT_HOSTS.AUTH + self.config.AUTH_API_URLS.completeSingleInvitation;
      url = helpers.api.constructAPIUrl(url, { orgId: self.orgId, invitationid: options.invitationid });

      var queryParam = { context: options.context, context_id: options.context_id };
      // Setup request with URL and Params
      var requestAPI = request.put(url).query(queryParam)
      .set('Content-Type', 'application/json')
      .set('Accept', 'application/json')
      .send({});

      //Setup token in Authorization header
      requestAPI = helpers.api.setupAPIToken(requestAPI, self.token);
      if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

      requestAPI.end(function (error, response) {
        if (error) {
          err = {};
          err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, error);
          dfd.reject(err);
        }
        else {
          dfd.resolve(response.body);
        }
      });
    }
    else {
      err = {};
      err.message = err.description = 'context_id or context or invitationid not found in request options.';
      err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
      dfd.reject(err);
    }
  }
  return dfd.promise;
}

/* options =  {
    "context_id": "string", //class id to be resent invition -required
    "invitationid" : "string", //unique invitation id which is to be fetched -required
    "context" : "string", //context for the invitation to be resent e.g. class_enrollment -required
    "space_title" : "string" //optional
  };
*/
function resendSingleInvitation(options) {
  var self = this;
  // Initializing promise
  var dfd = q.defer();

  var err = helpers.validations.isAuthenticated(self.orgId, self.token);
  if(err) { dfd.reject(err); }
  else {
    if (options && options.invitationid && options.context && options.context_id) {
      // Passed all validations, Contruct API url
      var url = self.config.DEFAULT_HOSTS.AUTH + self.config.AUTH_API_URLS.resendSingleInvitation;
      url = helpers.api.constructAPIUrl(url, { orgId: self.orgId, invitationid: options.invitationid });
      var queryParam = { context: options.context, context_id: options.context_id };
      var body = {};
      if(options.space_title) { body.space_title = options.space_title; }

      // Setup request with URL and Params
      var requestAPI = request.put(url).query(queryParam)
      .set('Content-Type', 'application/json')
      .set('Accept', 'application/json')
      .send(body);

      //Setup token in Authorization header
      requestAPI = helpers.api.setupAPIToken(requestAPI, self.token);
      if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

      requestAPI.end(function (error, response) {
        if (error) {
          err = {};
          err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, error);
          dfd.reject(err);
        }
        else { dfd.resolve(response.body); }
      });
    }
    else {
      err = {};
      err.message = err.description = 'context_id or context or invitationid not found in request options.';
      err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
      dfd.reject(err);
    }
  }
  return dfd.promise;
}
