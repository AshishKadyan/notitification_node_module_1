/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/
/***********************************************************
 * comproDLS SDK sisevents Adaptor
 * Functions for calling sisevents.
 ************************************************************/
/*********************************
 * Setting Up Module Entry Point
 **********************************/

var request = require('superagent');
var q = require('q');
var _und = require('underscore');

var helpers = require('../../helpers');
var DLSError = helpers.errors.DLSError;

module.exports = sisevents;

/*********************************
 * Public Function definitions
 **********************************/
function sisevents() {
    return {
		"postSISEvent": postSISEvent.bind(this)
    };
}

//options = {
//  "actor": {
//    "uuid": "string", // userid of user posting statements
//  },
//  "target": {
//    "uuid": "string", // userid of user posting statement
//  },
//  "product": {
//    "uuid": "string", // productid
//    "code": "string", // (optional)
//  },
//  "entities": [{
//    "verb": "string", // ['plan-responsibility-signoff', 'plan-status', 'plan-comment', 'item-responsibility', 'item-signoff', 'item-comment', 'item-assets', 'item-status'] currently only one verb is supported
//    "task": "string", // task-code of resource
//    "model": "string", // (optional) model hierarchy of resource if available
//    [verb] : {
//		"value": "string"
//	  }
//  }]
//};

function postSISEvent(options) {
	var self = this;

    //Initializing promise
    var dfd = q.defer();
    //Validations
    var err = {}, url;

    if(_und.isArray(options.entities)) {
        err = helpers.validations.isAuthenticated(self.orgId, self.token);
        if (err) {
            dfd.reject(err);
        } else {

            url = self.config.DEFAULT_HOSTS['SISEVENTS'] +
                  self.config.SISEVENTS_API_URLS.postMultiSISEvent;
            url = helpers.api.constructAPIUrl(url, { orgId: self.orgId });

            //Passed all validations, Construct API url

            var params = options;

            //Setup request with URL and Params
            var requestAPI = request.post(url).send(params);

            //Setup token in Authorization header
            requestAPI = helpers.api.setupAPIToken(requestAPI, self.token);
            if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

            //Call Product Timespent Api
            requestAPI.end(function(err, response) {
                if (err) {
                    err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
                    dfd.reject(err);
                } else {
                    dfd.resolve(response.body);
                }
            });
        }
    } else {
        err.message = err.description = 'Mandatory parameter entities not present in options';
        err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
        dfd.reject(err);
    }

    return dfd.promise;
}
