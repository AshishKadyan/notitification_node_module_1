/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/

/***********************************************************
 * comproDLS SDK PUSHX Adaptor
 * Functions for calling PUSHX.
 ************************************************************/


var q = require('q');
var request = require('superagent');

var helpers = require('../../helpers');
var pubnubClientWrapper = require('./pubnubClientWrapper');
var DLSError = helpers.errors.DLSError;

/*********************************
 * Setting Up Module Entry Point
 **********************************/
module.exports = pushX;

/*********************************
 * Public Function definitions
 **********************************/
function pushX() {
    var _pubnubClientWrapper = pubnubClientWrapper();
    return {
        "connect": _connect.bind(this, _pubnubClientWrapper),
        "cleanup": _cleanup.bind(this, _pubnubClientWrapper),
        "grantByUserOrgId": grantByUserOrgId.bind(this),
        "grantByAccountId": grantByAccountId.bind(this),
        "grantByAccountIdOnExtUserId": grantByAccountIdOnExtUserId.bind(this)
    };
}

/*********************************
 * Public Function definitions
 **********************************/

function _connect(pubnubCW, options) {
    if (!options.userid) {
        var err = {};
        err.message = err.description = 'Mandatory parameter userid not found in request options.';
        err = new DLSError(helpers.errors.ERROR_TYPES.PUSHX_ERROR, err);
        throw err;
    }

    // Adding SSL flag
    return pubnubCW.setup({
      'userid': options.userid,
      'pubnub': {
        'publishKey': options.publishKey,
        'subscribeKey': options.subscribeKey,
        'authKey': options.authKey,
        'ssl': true
      }
    });
}

function _cleanup(pubnubCW) { pubnubCW.cleanup(); }

/*options = {
  authKey: <authKey>
}*/
function grantByUserOrgId(options) {
    var self = this;
    var dfd = q.defer();  // Initializing promise
    // Validations
    var err = helpers.validations.isAuthenticated(self.orgId, self.token);
    if(err) { dfd.reject(err); }
    else {
        // Passed all validations, Construct API url
        var url = self.config.DEFAULT_HOSTS.PUSHX + self.config.PUSHX_API_URLS.grantByUserOrgId;
        url = helpers.api.constructAPIUrl(url, { orgId: self.orgId });
        // Setup request with URL and Params
        var requestAPI = request.post(url)
                         .set('Content-Type', 'application/json')
                         .set('Accept', 'application/json');

        var body = {};
        if(options.authKey) { body.authKey = options.authKey; }

        requestAPI.send(body);

        //Setup token in Authorization header
        requestAPI = helpers.api.setupAPIToken(requestAPI, self.token);
        if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

        // Call Change Password Api
        requestAPI.end(function(err, response) {
            if(err) {
                err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
                dfd.reject(err);
            }
            else { dfd.resolve(response.body); }
        });
    }
    return dfd.promise;
}

/*options = {
    accountId: <accountid>,
    refId: <extRefId>,
    authKey: <authKey>
}*/
function grantByAccountId(options) {
	var self = this, err ={};
    var dfd = q.defer();  // Initializing promise

    if(options.accountId && options.refId) {
        // Passed all validations, Construct API url
        var url = self.config.DEFAULT_HOSTS.PUSHX + self.config.PUSHX_API_URLS.grantByAccountId;
        url = helpers.api.constructAPIUrl(url, { accountId: options.accountId });
        // Setup request with URL and Params
        var requestAPI = request.post(url)
                         .set('Content-Type', 'application/json')
                         .set('Accept', 'application/json');
        if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

        var body = { refId: options.refId };
        if(options.authKey) { body.authKey = options.authKey; }

        requestAPI.send(body);
        requestAPI.end(function(err, response) {
            if(err) {
                err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
                dfd.reject(err);
            }
            else { dfd.resolve(response.body); }
        });
    }
    else {
        err.message = err.description = "Required parameter ['accountId', 'refId'] " +
                                        "not found in request options";
        err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
        dfd.reject(err);
    }
    return dfd.promise;
}

/*options = {
    accountId: <accountid>,
    extUserId: <extUserId>, //mandatory
    authKey: <authKey>
}*/
function grantByAccountIdOnExtUserId(options) {
	var self = this, err ={};
    var dfd = q.defer();  // Initializing promise

    if(options.accountId && options.extUserId) {
        // Passed all validations, Construct API url
        var url = self.config.DEFAULT_HOSTS.PUSHX + self.config.PUSHX_API_URLS.grantByAccountId;
        url = helpers.api.constructAPIUrl(url, { accountId: options.accountId });
        // Setup request with URL and Params
        var requestAPI = request.post(url)
                         .set('Content-Type', 'application/json')
                         .set('Accept', 'application/json');
        if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

        var body = { extUserId: options.extUserId };
        if(options.authKey) { body.authKey = options.authKey; }

        requestAPI.send(body);
        requestAPI.end(function(err, response) {
            if(err) {
                err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
                dfd.reject(err);
            }
            else { dfd.resolve(response.body); }
        });
    }
    else {
        err.message = err.description = "Required parameter ['accountId', 'extUserId'] " +
                                        "not found in request options";
        err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
        dfd.reject(err);
    }
    return dfd.promise;
}

