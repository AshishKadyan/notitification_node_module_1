/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/
/***********************************************************
 * comproDLS SDK Activity Attempt Manager
 * Functions for calling Activity Attempt APIs.
 ************************************************************/

var request = require('superagent');
var q = require('q');

var helpers = require('../../helpers');
var DLSError = helpers.errors.DLSError;
var extend = require('extend');

module.exports = Attempt;
/*********************************
 * Constructor
 **********************************/

function Attempt(productId, activityId, attemptId, authCredentials, classId, config) {
    this.productId = productId;
    this.activityId = activityId;
    this.attemptId = attemptId;
    this.classId = classId;
    this.config = config;
    
    var authCredentials;
    
    
    function getProperties() {
        return this.authCredentials;
    }

    function setProperties(authCredentials) {
       
        this.authCredentials = authCredentials;
        
    }
    
        //Privilaged Methods
    Attempt.prototype.getAuthCredentials = function () {
        return getProperties();
    };
    
    Attempt.prototype.setAuthCredentials = function (orgid, token) {
        var authCredentials = new Object();
        authCredentials.orgId = orgid;
        authCredentials.token = token;
        
        setProperties(authCredentials);
    };
};

/*********************************
 * Method Implementations
 **********************************/


Attempt.prototype.start = function (params) {
    var self = this;
     
    var orgid = this.getAuthCredentials().orgId;
    var token = this.getAuthCredentials().token;
    //Initializing promise
    var dfd = q.defer();
    //Validations
        var err = helpers.validations.isAuthenticated(orgid, token);
        if (err) {
            dfd.reject(err);
        } else {

    //Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS['ACTIVITY'] + self.config.ACTIVITY_API_URLS.newAttemptAPI;
    url = helpers.api.constructAPIUrl(url, {
            "orgId" : orgid,
            "productId" : self.productId,
            "activityId" : self.activityId
        });
    url = helpers.api.addClassIdQueryParam(url, self.classId);
    
    //Construct parameters
    if(params == undefined || params == null)
        params = {};

    //Setup request with URL and Params
    var req = request.post(url).send(params);

    //Setup token in Authorization header
    req = helpers.api.setupAPIToken(req, token);

    // setting up traceid
    if(self.traceid) { req.set('X-Amzn-Trace-Id', self.traceid); }

    //Call start attempt Api
    req.end(function (err, response) {
        if (err) {
            err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
            dfd.reject(err);
        } else {
            var responseBody = response.body;
            self.attemptId = responseBody.uuid;
            extend(true, self, responseBody);
            var resObject = new Object();
            resObject.attempt = self;
            dfd.resolve(resObject);
        }
    });
    }
    return dfd.promise;

};

Attempt.prototype.getAttemptInfo = function () {
    var orgid = this.getAuthCredentials().orgId;
    var token = this.getAuthCredentials().token;
    var self = this;

    //Initializing promise
    var dfd = q.defer();

    //Validations
        var err = helpers.validations.isAuthenticated(orgid, token);
        if (err) {
            dfd.reject(err);
        } else {

    //Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS['ACTIVITY'] + self.config.ACTIVITY_API_URLS.existingAttemptAPI;
    url = helpers.api.constructAPIUrl(url, {
            "orgId" : orgid,
            "productId" : self.productId,
            "activityId" : self.activityId,
            "attemptId" : self.attemptId
        });
    url = helpers.api.addClassIdQueryParam(url, self.classId);
    //Setup request with URL and Params
    var req = request.get(url);

    //Setup token in Authorization header
    req = helpers.api.setupAPIToken(req, token);

    // setting up traceid
    if(self.traceid) { req.set('X-Amzn-Trace-Id', self.traceid); }

    //Call GET attempt INFO Api
    req.end(function (err, response) {
        if (err) {
            err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
            dfd.reject(err);
        } else {
            var responseBody = response.body;
            self.attemptId = responseBody.uuid;
            extend(true, self, responseBody);
            var resObject = new Object();
            resObject.attempt = self;
            dfd.resolve(resObject);
        }
    });
    }
    return dfd.promise;
};

Attempt.prototype.getState = function () {
    var orgid = this.getAuthCredentials().orgId;
    var token = this.getAuthCredentials().token;
    var self = this;

    //Initializing promise
    var dfd = q.defer();

    //Validations
        var err = helpers.validations.isAuthenticated(orgid, token);
        if (err) {
            dfd.reject(err);
        } else {

    //Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS['ACTIVITY'] + self.config.ACTIVITY_API_URLS.existingAttemptAPI;
    url = helpers.api.constructAPIUrl(url, {
            "orgId" : orgid,
            "productId" : self.productId,
            "activityId" : self.activityId,
            "attemptId" : self.attemptId
        });
    url = helpers.api.addClassIdQueryParam(url, self.classId);
    //Setup request with URL and Params
    var req = request.get(url);

    //Setup token in Authorization header
    req = helpers.api.setupAPIToken(req, token);

    // setting up traceid
    if(self.traceid) { req.set('X-Amzn-Trace-Id', self.traceid); }

    //Call GET saved state Api
    req.end(function (err, response) {
        if (err) {
            err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
            dfd.reject(err);
        } else {
            var responseBody = response.body;
            var resObject = new Object();
            resObject.state = responseBody.data.savedstate.state;
            dfd.resolve(resObject);
        }
    });
    }
    return dfd.promise;
};

Attempt.prototype.saveState = function (state) {
    var orgid = this.getAuthCredentials().orgId;
    var token = this.getAuthCredentials().token;
    var self = this;

    //Initializing promise
    var dfd = q.defer();

    //Validations
        var err = helpers.validations.isAuthenticated(orgid, token);
        if (err) {
            dfd.reject(err);
        } else {

    //Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS['ACTIVITY'] + self.config.ACTIVITY_API_URLS.existingAttemptAPI;
    url = helpers.api.constructAPIUrl(url, {
            "orgId" : orgid,
            "productId" : self.productId,
            "activityId" : self.activityId,
            "attemptId" : self.attemptId
        });
    url = helpers.api.addClassIdQueryParam(url, self.classId);

    //Setup request with URL and Params
    var req = request.put(url).send(state);

    //Setup token in Authorization header
    req = helpers.api.setupAPIToken(req, token);

    // setting up traceid
    if(self.traceid) { req.set('X-Amzn-Trace-Id', self.traceid); }

    //Call PUT saved state Api
    req.end(function (err, response) {
        if (err) {
            err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
            dfd.reject(err);
        } else {
            var responseBody = response.body;
            var resObject = new Object();
            resObject.status = responseBody;
            dfd.resolve(resObject);
        }
    });
    }
    return dfd.promise;
};


Attempt.prototype.getUserResponse = function () {
    var orgid = this.getAuthCredentials().orgId;
    var token = this.getAuthCredentials().token;
    var self = this;

    //Initializing promise
    var dfd = q.defer();

    //Validations
        var err = helpers.validations.isAuthenticated(orgid, token);
        if (err) {
            dfd.reject(err);
        } else {

    //Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS['ACTIVITY'] + self.config.ACTIVITY_API_URLS.userResponseAPI;
    url = helpers.api.constructAPIUrl(url, {
            "orgId" : orgid,
            "productId" : self.productId,
            "activityId" : self.activityId,
            "attemptId" : self.attemptId
        });
    url = helpers.api.addClassIdQueryParam(url, self.classId);

    //Setup request with URL and Params
    var req = request.get(url);

    //Setup token in Authorization header
    req = helpers.api.setupAPIToken(req, token);

    // setting up traceid
    if(self.traceid) { req.set('X-Amzn-Trace-Id', self.traceid); }

    //Call GET Userresponse Api
    req.end(function (err, response) {
        if (err) {
            err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
            dfd.reject(err);
        } else {
            var responseBody = response.body;
            var resObject = new Object();
            resObject.userresponse = responseBody;
            dfd.resolve(resObject);
        }
    });
    }
    return dfd.promise;
};

Attempt.prototype.saveUserResponse = function (userresponse) {
    var orgid = this.getAuthCredentials().orgId;
    var token = this.getAuthCredentials().token;
    var self = this;

    //Initializing promise
    var dfd = q.defer();

    //Validations
        var err = helpers.validations.isAuthenticated(orgid, token);
        if (err) {
            dfd.reject(err);
        } else {

    //Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS['ACTIVITY'] + self.config.ACTIVITY_API_URLS.userResponseAPI;
    url = helpers.api.constructAPIUrl(url, {
            "orgId" : orgid,
            "productId" : self.productId,
            "activityId" : self.activityId,
            "attemptId" : self.attemptId
        });
            
    url = helpers.api.addClassIdQueryParam(url, self.classId);

    //Setup request with URL and Params
    var req = request.put(url).send(userresponse);

    //Setup token in Authorization header
    req = helpers.api.setupAPIToken(req, token);

    // setting up traceid
    if(self.traceid) { req.set('X-Amzn-Trace-Id', self.traceid); }

    //Call PUT Userresponse Api
    req.end(function (err, response) {
        if (err) {
            err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
            dfd.reject(err);
        } else {
            var responseBody = response.body;
            var resObject = new Object();
            resObject.status = responseBody;
            dfd.resolve(resObject);
        }
    });
    }
    return dfd.promise;
};

Attempt.prototype.submit = function (userresponse) {
   
    var orgid = this.getAuthCredentials().orgId;
    var token = this.getAuthCredentials().token;
    var self = this;
    //Initializing promise
    var dfd = q.defer();
    //Validations
        var err = helpers.validations.isAuthenticated(orgid, token);
        if (err) {
            dfd.reject(err);
        } else {

    //Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS['ACTIVITY'] + self.config.ACTIVITY_API_URLS.submitAttemptAPI;
    url = helpers.api.constructAPIUrl(url, {
            "orgId" : orgid,
            "productId" : self.productId,
            "activityId" : self.activityId,
            "attemptId" : self.attemptId
        });
    url = helpers.api.addClassIdQueryParam(url, self.classId);

    //Setup request with URL and Params
    var req;
    if(userresponse == undefined || userresponse == null)
    {
        req = request.post(url).send({});
    }
    else
    {
        req = request.post(url).send(userresponse);
    }

    //Setup token in Authorization header
    req = helpers.api.setupAPIToken(req, token);

    // setting up traceid
    if(self.traceid) { req.set('X-Amzn-Trace-Id', self.traceid); }

    //Call submit attempt Api
    req.end(function (err, response) {
        if (err) {
            err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
            dfd.reject(err);
        } else {
            var responseBody = response.body;
            var resObject = new Object();
            resObject.status = responseBody;
            dfd.resolve(resObject);
        }
    });
    }
    return dfd.promise;
};
