/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/

/***********************************************************
 * comproDLS SDK Activity API Adaptor
 * Functions for calling Activity API.
 ************************************************************/
var request = require('superagent');
var q = require('q');

var helpers = require('../../helpers');
var DLSError = helpers.errors.DLSError;
var extend = require('extend');
/*********************************
 * Public Function definitions
 **********************************/
module.exports = Activity;

var attempt = require('./attempt');

function Activity(productId, activityId, classId) {
    //When Activity constructor is called, check for instance type
    //comproDLS.Activity() will give instance type as ComproDLS
    //So the control goes to else
    if (this instanceof Activity) {
        this.productId = productId; //Here this is instance of Activity
        this.activityId = activityId; //Here this is instance of Activity
        this.classId = classId;
        
    } else { //New object of Activity is created and its instance type is Activity
        var act = new Activity(productId, activityId, classId);
        act.token = this.token; //Here this is instance of ComproDLS
        act.orgId = this.orgId; //Here this is instance of ComproDLS
        act.config = this.config;
        return act;
    }
};

Activity.prototype.getDetails = function () {
    var self = this;

    //Initializing promise
    var dfd = q.defer();

    //Validations
        var err = helpers.validations.isAuthenticated(this.orgId, this.token);
        if (err) {
            dfd.reject(err);
        } else {

    //Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS['ACTIVITY'] + self.config.ACTIVITY_API_URLS.activityDetailsAPI;

    url = helpers.api.constructAPIUrl(url, {
            "orgId" : self.orgId,
            "productId" : self.productId,
            "activityId" : self.activityId
        });
    url = helpers.api.addClassIdQueryParam(url, self.classId);

    //Setup request with URL and Params
    var req = request.get(url);

    //Setup token in Authorization header
    req = helpers.api.setupAPIToken(req, self.token);

    // setting up traceid
    if(self.traceid) { req.set('X-Amzn-Trace-Id', self.traceid); }

    //Call GET activity details Api
    req.end(function (err, response) {
        if (err) {
            err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
            dfd.reject(err);
        } else {
            var responseBody = response.body;
            var resObject = new Object();
            resObject.activity = responseBody;
            dfd.resolve(resObject);
        }
    });
    }
    return dfd.promise;
}

Activity.prototype.loadAttempt = function (attemptId) {
    var oldAttempt = new attempt(this.productId, this.activityId, attemptId, null, this.classId, this.config);
    oldAttempt.setAuthCredentials(this.orgId, this.token);
    return oldAttempt.getAttemptInfo();
}

Activity.prototype.getAttempt = function (attemptId) {
    var oldAttempt = new attempt(this.productId, this.activityId, attemptId, null, this.classId, this.config);
    oldAttempt.setAuthCredentials(this.orgId, this.token);
    return oldAttempt;
}

Activity.prototype.newAttempt = function (params) {
    var newAttempt = new attempt(this.productId, this.activityId, null, null, this.classId, this.config);
    newAttempt.setAuthCredentials(this.orgId, this.token);
    return newAttempt.start(params);
}

Activity.prototype.getAllQuestions = function () {
        var self = this;

    //Initializing promise
    var dfd = q.defer();

    //Validations
        var err = helpers.validations.isAuthenticated(this.orgId, this.token);
        if (err) {
            dfd.reject(err);
        } else {

    //Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS['PRODUCT'] + self.config.PRODUCT_API_URLS.activityAPI;
    url = helpers.api.constructAPIUrl(url, {
            "orgId" : self.orgId,
            "productId" : self.productId,
            "activityId" : self.activityId
        });
    url = helpers.api.addClassIdQueryParam(url, self.classId);
    //Setup request with URL and Params
    var req = request.get(url);

    //Setup token in Authorization header
    req = helpers.api.setupAPIToken(req, self.token);

    // Setting trace id
    if(self.traceid) { req.set('X-Amzn-Trace-Id', self.traceid); }

    //Call GET activity details Api
    req.end(function (err, response) {
        if (err) {
            err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
            dfd.reject(err);
        } else {
            var responseBody = response.body;
            var resObject = new Object();
            resObject.questions = responseBody.items;
            dfd.resolve(resObject);
        }
    });
    }
    return dfd.promise;
}

Activity.prototype.getQuestionsCount = function () {
        var self = this;

    //Initializing promise
    var dfd = q.defer();

    //Validations
        var err = helpers.validations.isAuthenticated(this.orgId, this.token);
        if (err) {
            dfd.reject(err);
        } else {

    //Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS['PRODUCT'] + self.config.PRODUCT_API_URLS.activityAPI;
    url = helpers.api.constructAPIUrl(url, {
            "orgId" : self.orgId,
            "productId" : self.productId,
            "activityId" : self.activityId
        });
    url = helpers.api.addClassIdQueryParam(url, self.classId);
    //Setup request with URL and Params
    var req = request.get(url);

    //Setup token in Authorization header
    req = helpers.api.setupAPIToken(req, self.token);

    // Setting trace id
    if(self.traceid) { req.set('X-Amzn-Trace-Id', self.traceid); }

    //Call GET activity details Api
    req.end(function (err, response) {
        if (err) {
            err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
            dfd.reject(err);
        } else {
            var responseBody = {"count": response.body.items.length};
            var resObject = new Object();
            resObject.count = responseBody;
            dfd.resolve(resObject);
        }
    });
    }
    return dfd.promise;
}
