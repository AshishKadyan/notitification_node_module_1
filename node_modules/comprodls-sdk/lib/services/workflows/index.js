/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/
/***********************************************************
 * comproDLS SDK Open Access Manager Module
 * Provides Open Access functions for the SDK
 ************************************************************/
var q = require('q');
var request = require('superagent');
var helpers = require('./../../helpers');
var DLSError = helpers.errors.DLSError;

/*************************************
 * Setting up Exports/Public functions
 *************************************/

module.exports = workflows;

//Workflows Adaptor Constructor
function workflows(accountId) {
  this.accountId = accountId;
  return {
    createWorkflow: createWorkflow.bind(this),
    getAllWorkflow: getAllWorkflow.bind(this),
    getAllWorkflowOfAUser: getAllWorkflowOfAUser.bind(this),
    getAWorkflow: getAWorkflow.bind(this),
    acceptAWorkflow: acceptAWorkflow.bind(this),
    processAWorkflow: processAWorkflow.bind(this),
    revokeAWorkflow: revokeAWorkflow.bind(this),
    completeAWorkflow: completeAWorkflow.bind(this),
    updateWorkflowRequest: updateWorkflowRequest.bind(this)
  }
}

/*********************************
 * Public Function definitions
 **********************************/
/**
 * options={
    "ext_user_id": "string", //mandatory
    "workflow_type": "institution_request", //mandatory
    "institution_request": {
      "address": {
        "city": "string",
        "country": "string",
        "street1": "string",
        "street2": "string",
        "street3": "string",
        "house_no": "string",
        "post_code": "string"
      },
      "display_name": "string",
      "school_key": "string"
    }
  }
 */
function createWorkflow(options) {
  var self = this;
  // Initializing promise
  var dfd = q.defer();
  // Validations

  if(options && options.ext_user_id && options.workflow_type) {
    // Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS.AUTH +
              self.config.AUTH_API_URLS.workflows;
    url = helpers.api.constructAPIUrl(url, {
      accountid: self.accountId
    });

    // Setup request with URL and Params
    var requestAPI = request.post(url)
    .set('Content-Type', 'application/json')
    .set('Accept', 'application/json')
    .send(options)

    if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

    requestAPI.end(function(error, response) {
      if(error) {
        err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, error);
        dfd.reject(err);
      }
      else { dfd.resolve(response.body); }
    });
  } else {
    var err = {};
    err.message = err.description = 'ext_user_id or workflow_type not found in request options.';
    err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
    dfd.reject(err);
  }
  return dfd.promise;
}

/* options = {
    "workflow_type": "string", // required
    "status" : "string", // required
    "start": "string" //epoch
    "end": "string" //epoch
    "cursor" : "string"
  };
*/
function getAllWorkflow(options) {
  var self = this;
  // Initializing promise
  var dfd = q.defer();
  if(options && options.workflow_type && options.status ) {

    // Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS.AUTH + self.config.AUTH_API_URLS.workflows;
    url = helpers.api.constructAPIUrl(url,{ accountid: self.accountId });
    var queryParams = { workflow_type: options.workflow_type, status: options.status };
    if(options.start) { queryParams.start =  options.start; }
    if(options.end) { queryParams.end =  options.end; }
    if(options.cursor) { queryParams.cursor =  options.cursor; }


    // Setup request with URL and Params
    var requestAPI = request.get(url).query(queryParams);
    if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

    requestAPI.end(function (error, response) {
      if(error) {
        err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, error);
        dfd.reject(err);
      }
      else { dfd.resolve(response.body); }
    });
  }
  else {
    err = {};
    err.message = err.description = 'Mandatory params - workflow_type, status not found in ' +
                                    'request options.';
    err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
    dfd.reject(err);
  }
  return dfd.promise;
}

/* options = {
    "workflow_type": "string", // required
    "status" : "string", // required
    "ext_user_id": "string" //required
    "start": "string" //epoch
    "end": "string" //epoch
    "cursor" : "string"
  };
*/
function getAllWorkflowOfAUser(options) {
  var self = this;
  // Initializing promise
  var dfd = q.defer();
  if(options && options.workflow_type && options.status && options.ext_user_id) {

    // Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS.AUTH + self.config.AUTH_API_URLS.getAllWorkflowOfAUser;
    url = helpers.api.constructAPIUrl(url,{ accountid: self.accountId });
    var queryParams = { workflow_type: options.workflow_type, status: options.status, ext_user_id: options.ext_user_id };
    if(options.start) { queryParams.start =  options.start; }
    if(options.end) { queryParams.end =  options.end; }
    if(options.cursor) { queryParams.cursor =  options.cursor; }


    // Setup request with URL and Params
    var requestAPI = request.get(url).query(queryParams);
    if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

    requestAPI.end(function (error, response) {
      if(error) {
        err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, error);
        dfd.reject(err);
      }
      else { dfd.resolve(response.body); }
    });
  }
  else {
    err = {};
    err.message = err.description = 'Mandatory params - workflow_type, status, ext_user_id not found in ' +
                                    'request options.';
    err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
    dfd.reject(err);
  }
  return dfd.promise;
}

/* options = {
    "workflowid": "string", // required
    "context_id" : "string", // required
  };
*/
function getAWorkflow(options) {
  var self = this;
  // Initializing promise
  var dfd = q.defer();
  if(options && options.workflowid && options.context_id ) {

    // Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS.AUTH + self.config.AUTH_API_URLS.getAWorkflow;
    url = helpers.api.constructAPIUrl(url,{ accountid: self.accountId, workflowid: options.workflowid });

    var queryParams = { context_id: options.context_id };


    // Setup request with URL
    var requestAPI = request.get(url).query(queryParams);
    if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

    requestAPI.end(function (error, response) {
      if(error) {
        err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, error);
        dfd.reject(err);
      }
      else { dfd.resolve(response.body); }
    });
  }
  else {
    err = {};
    err.message = err.description = 'Mandatory params - workflow_type, status not found in ' +
                                    'request options.';
    err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
    dfd.reject(err);
  }
  return dfd.promise;
}

/* options = {
    "workflowid": "string", // required
    "body" : {              // required
      "context_id": "string"  // required
    }
  };
*/
function acceptAWorkflow(options) {
  var self = this;
  // Initializing promise
  var dfd = q.defer();
  if(options && options.workflowid && options.body && options.body.context_id ) {

    // Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS.AUTH + self.config.AUTH_API_URLS.acceptAWorkflow;
    url = helpers.api.constructAPIUrl(url,{ accountid: self.accountId, workflowid: options.workflowid });

    var params = options.body;
    // Setup request with URL
    var requestAPI = request.put(url).send(params);
    if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }
    requestAPI.end(function (error, response) {
      if(error) {
        err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, error);
        dfd.reject(err);
      }
      else { dfd.resolve(response); }
    });
  }
  else {
    err = {};
    err.message = err.description = 'Mandatory params - workflowid, body or body.context_id not found in ' +
                                    'request options.';
    err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
    dfd.reject(err);
  }
  return dfd.promise;
}

/* options = {
    "workflowid": "string", // required
    "body" : {              // required
      "context_id": "string",  // required
      "org_id": "string",   // required
    }
  };
*/
function processAWorkflow(options) {
  var self = this;
  // Initializing promise
  var dfd = q.defer();
  if(options && options.workflowid && options.body && options.body.context_id &&
    options.body.org_id) {

    // Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS.AUTH + self.config.AUTH_API_URLS.processAWorkflow;
    url = helpers.api.constructAPIUrl(url,{ accountid: self.accountId, workflowid: options.workflowid });

    var params = options.body;
    // Setup request with URL
    var requestAPI = request.put(url).send(params);
    if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

    requestAPI.end(function (error, response) {
      if(error) {
        err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, error);
        dfd.reject(err);
      }
      else { dfd.resolve(response); }
    });
  }
  else {
    err = {};
    err.message = err.description = 'Mandatory params - workflowid, body, body.context_id, body.org_id' + 
                                    ' in request options.';
    err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
    dfd.reject(err);
  }
  return dfd.promise;
}

/* options = {
    "workflowid": "string", // required
    "body" : {              // required
      "context_id": "string"  // required
    }
  };
*/
function revokeAWorkflow(options) {
  var self = this;
  // Initializing promise
  var dfd = q.defer();
  if(options && options.workflowid && options.body && options.body.context_id ) {

    // Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS.AUTH + self.config.AUTH_API_URLS.revokeAWorkflow;
    url = helpers.api.constructAPIUrl(url,{ accountid: self.accountId, workflowid: options.workflowid });

    var params = options.body;


    // Setup request with URL
    var requestAPI = request.put(url).send(params);
    if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

    requestAPI.end(function (error, response) {
      if(error) {
        err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, error);
        dfd.reject(err);
      }
      else { dfd.resolve(response); }
    });
  }
  else {
    err = {};
    err.message = err.description = 'Mandatory params - workflowid, body or body.context_id not found in ' +
                                    'request options.';
    err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
    dfd.reject(err);
  }
  return dfd.promise;
}

/* options = {
    "workflowid": "string", // required
    "body" : {              // required
      "context_id": "string"  // required
    }
  };
*/
function completeAWorkflow(options) {
  var self = this;
  // Initializing promise
  var dfd = q.defer();
  if(options && options.workflowid && options.body && options.body.context_id ) {

    // Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS.AUTH + self.config.AUTH_API_URLS.completeAWorkflow;
    url = helpers.api.constructAPIUrl(url,{ accountid: self.accountId, workflowid: options.workflowid });

    var params = options.body;


    // Setup request with URL
    var requestAPI = request.put(url).send(params);
    if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

    requestAPI.end(function (error, response) {
      if(error) {
        err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, error);
        dfd.reject(err);
      }
      else { dfd.resolve(response); }
    });
  }
  else {
    err = {};
    err.message = err.description = 'Mandatory params - workflowid, body or body.context_id not found in ' +
                                    'request options.';
    err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
    dfd.reject(err);
  }
  return dfd.promise;
}

/**
 * options={
 *  "context_id": "string", //mandatory
 *  "body": {
      "ext_user_id": "string", //mandatory
      "workflow_type": "institution_request", //mandatory
      "institution_request": {
        "address": {
          "city": "string",
          "country": "string",
          "street1": "string",
          "street2": "string",
          "street3": "string",
          "house_no": "string",
          "post_code": "string"
        },
        "display_name": "string",
        "school_key": "string"
      }
    } 
  }
 */
function updateWorkflowRequest(options) {
  var self = this;
  // Initializing promise
  var dfd = q.defer();
  // Validations

  if(options && options.context_id && options.body.ext_user_id && options.body.workflow_type && options.workflowid) {
    // Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS.AUTH +
              self.config.AUTH_API_URLS.getAWorkflow;
    url = helpers.api.constructAPIUrl(url, {
      accountid: self.accountId, workflowid: options.workflowid
    });
    var queryParams = { context_id: options.context_id };

    // Setup request with URL and Params
    var requestAPI = request.put(url)
    .set('Content-Type', 'application/json')
    .set('Accept', 'application/json').query(queryParams)
    .send(options.body)

    if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }
    requestAPI.end(function(error, response) {
      if(error) {
        err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, error);
        dfd.reject(err);
      }
      else { dfd.resolve(response); }
    });
  } else {
    var err = {};
    err.message = err.description = 'context_id or ext_user_id or workflow_type or workflowid not found in request options.';
    err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
    dfd.reject(err);
  }
  return dfd.promise;
}