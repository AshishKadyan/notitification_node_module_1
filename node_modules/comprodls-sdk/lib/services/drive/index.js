/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/

/***********************************************************
 * comproDLS SDK drive Adaptor
 * Functions for calling Drive-service API.
 ************************************************************/

/*********************************
 * Setting Up Module Entry Point
 **********************************/

var q = require('q');
var request = require('superagent');

var helpers = require('../../helpers');
var DLSError = helpers.errors.DLSError;

module.exports = documents;

/*********************************
 * Public Function definitions
 **********************************/
function documents() {
  return {
    getAParticularDocument: getAParticularDocument.bind(this),
    getAllDocumentsInAFolder: getAllDocumentsInAFolder.bind(this)
  };
}

/*
  options = {
    accountid : 'string', //mandatory
    extuserid : 'string', //mandatory
    documentid : 'string', //mandatory
    folderid: 'string',  //mandatory
  }
*/
function getAParticularDocument(options) {
  var self = this;
  var dfd = q.defer();

  if (options && options.accountid && options.extuserid && options.documentid && options.folderid) {
    //Passed all validations, Construct API url
    var url = self.config.DEFAULT_HOSTS.DRIVE + self.config.DRIVE_API_URLS.getAParticularDocument;
    var urlOptions = {
      accountid: options.accountid, extuserid: options.extuserid,
      documentid: options.documentid
    };
    url = helpers.api.constructAPIUrl(url, urlOptions);

    var params = { folderid: options.folderid };
    //Setup request with URL and Params
    var requestAPI = request.get(url).query(params);

    if (self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

    requestAPI.end(function (err, response) {
      if (err) {
        err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
        dfd.reject(err);
      }
      else { dfd.resolve(response.body); }
    });
  }
  else {
    var error = {};
    error.message = error.description = 'Mandatory params - accountid or extuserid or ' +
      'documentid or folderid not found in request options.';
    error = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, error);
    dfd.reject(error);
  }
  return dfd.promise;
}

/*
  options = {
    accountid: 'string', //mandatory
    extuserid: 'string', //mandatory
    folderid: 'string',  //mandatory
    classid: 'string',
    productcode: 'string',
    assigned_path_id: 'string',
    item-code: 'string',
    cursor: 'string'
  }
*/
function getAllDocumentsInAFolder(options) {
  var self = this;
  var dfd = q.defer();

  if (options && options.accountid && options.extuserid && options.folderid) {
    //Passed all validations, Construct API url
    var url = self.config.DEFAULT_HOSTS.DRIVE + self.config.DRIVE_API_URLS.getAllDocumentsInAFolder;
    url = helpers.api.constructAPIUrl(url,
      { accountid: options.accountid, extuserid: options.extuserid });

    // Contruct parameters
    var params = { folderid: options.folderid };
    if (options.classid) { params.classid = options.classid; }
    if (options.productcode) { params.productcode = options.productcode; }
    if (options.assigned_path_id) { params.assigned_path_id = options.assigned_path_id; }
    if (options['item-code']) { params['item-code'] = options['item-code']; }
    if (options.cursor) { params.cursor = options.cursor; }

    //Setup request with URL and Params
    var requestAPI = request.get(url).query(params);

    if (self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

    requestAPI.end(function (err, response) {
      if (err) {
        err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
        dfd.reject(err);
      }
      else { dfd.resolve(response.body); }
    });
  }
  else {
    var error = {};
    error.message = error.description = 'Mandatory params - accountid or extuserid or folderid ' +
      'not found in request options.';
    error = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, error);
    dfd.reject(error);
  }
  return dfd.promise;
}
