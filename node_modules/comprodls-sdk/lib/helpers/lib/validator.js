/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/
/***********************************************************
 * comproDLS SDK Validator Helper Module
 * This module contains validation helper functions for comproDLS SDK
 ************************************************************/
var validator = require("validate.js");
var errors = require('./errors');
var DLSError = errors.DLSError;


/****************************************************
 * Setting up Exports/Public functions
 *****************************************************/
exports.validate = validate;
exports.isAuthenticated = validateIsAuthenticated;

/*********************************
 * Public Function definitions
 **********************************/
function validate(options, constraints) {
    var err = {};
    var validation_errors = validator(options, constraints);
    if (validation_errors) {
        for (var validation_error in validation_errors) {
            err.message = err.description = validation_errors[validation_error][0];
            err = new DLSError(errors.ERROR_TYPES.SDK_ERROR, err);
            return err;
        }
    } else {
        return undefined;
    }
};

function validateIsAuthenticated(orgId, token) {
    var validate_options = {
        'organization': orgId,
        'token': token
    };

    var validate_constraints = {
        "organization": {
            "presence": {
                "message" : "^SDK Instance does not have valid orgid or token. Please authenticate using authWithCredentials or authWithToken method."
            }
        },
        "token": {
            "presence": {
                "message" : "^SDK Instance does not have valid orgid or token. Please authenticate using authWithCredentials or authWithToken method."
            }
        }
    };

    return validate(validate_options, validate_constraints);
};

/*********************************
 * Private Function definitions
 **********************************/
validator.validators.isString = function(value, options) {
    if (!validator.isString(value)) {
        return options.message || "is not a valid string";
    }
};

validator.validators.isObject = function(value, options) {
    if (!validator.isObject(value)) {
        return options.message || "is not a valid object";
    }
};

validator.validators.contains = function(value, options) {
    if (validator.isArray(options)) {
        for (var key in options) {
            if (!value || !value.hasOwnProperty(options[key])) {
                return options.message || "does not contain " + options[key];
            }
        }
    } else if (validator.isString(options)) {
        if (!value || !value.hasOwnProperty(options)) {
            return options.message || "does not contain " + options;
        }
    }
};