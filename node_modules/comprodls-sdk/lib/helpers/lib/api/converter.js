/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/

 var Errors = require('../errors');
 var DLSError = Errors.DLSError;

/**
 * This function converts user entity to generate SDK response.
 * @param { *data: {userEntityDDB} } options
 */
function __convertUserResponse(options) {
  var userEntity = options.data,
      userRoles = userEntity.roles;

  if(Array.isArray(userRoles)) {

    //convert to SDK response.
    var userRolesInResponse = {};
    for(var roleIndex in userRoles) {
      userRolesInResponse[userRoles[roleIndex]] = [];
    }

    userEntity.roles = userRolesInResponse;
  }

  return userEntity;
}

/**
 * This function converts class entity from DDB to generate SDK response.
 * @param { *data: {classEntityDDB} } options
 */
function __convertClassResponse(options) {
  var classEntity = options.data;

  if (classEntity.hasOwnProperty('pk') === false) {
    // BAAS structure returned, no need to convert response.
    return classEntity;
  }

  var response = {
    uuid: classEntity.classid,
    type: 'group'
  };

  Object.assign(response, classEntity);

  var firstName = classEntity.class.instructor.first_name,
    lastName = classEntity.class.instructor.last_name;

  response.class.instructor.uuid = classEntity.class.instructor.dls_user_id;

  if (firstName || lastName) {
    response.class.instructor.name  = firstName ? firstName : '';

    if (lastName) {
      response.class.instructor.name += firstName ? (' ' + lastName) : lastName;
    }
  }

  return response;
}


/**
 * This function converts enrollment entities to generate SDK response.
 * @param { *data: [enrollmentEntities] } options
 */
 function __convertEnrollmetsResponse(options) {
  var enrollmentEntities = options.data;

  //convert to SDK response.
  for(var enrollmentIdx in enrollmentEntities) {
    var enrollment = enrollmentEntities[enrollmentIdx];
    var firstName = enrollment.first_name,
        lastName = enrollment.last_name;
    if(firstName || lastName) {
      enrollment.name  = firstName ? firstName : '';
  
      if(lastName) {
        enrollment.name += firstName ? (' ' + lastName) : lastName;
      }
    }

    enrollment.uuid = enrollment.dls_user_id;

    if(enrollment.username) {
      enrollment.ext_username = enrollment.username;
    }
    enrollment.username = enrollment.userid + '--ACCOUNT';
  }

  return enrollmentEntities;
}

function __convertElasticsearchErrResponse(options) {
  var err = options.err;
  var type = options.type;
  var error = new DLSError(type, err);
  if (err.response && err.response.body && err.response.body.meta &&
    err.response.body.meta.body) {
    error.message = 'Elasticsearch Error. Please refer data field for more information';
    error.data = err.response.body.meta.body;
  }
  return error;
}

module.exports = {
  convertUserResponse: __convertUserResponse,
  convertClassResponse: __convertClassResponse,
  convertEnrollmetsResponse: __convertEnrollmetsResponse,
  convertElasticsearchErrResponse : __convertElasticsearchErrResponse
};
