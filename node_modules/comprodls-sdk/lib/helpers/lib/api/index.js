/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/
/***********************************************************
 * comproDLS SDK Generic API Caller
 * This module provides generic function(s) to call any comproDLS API. 
 * The generic approach for calling API(s) require a prior knowledge of 
 * the specific URLs and parameters (as per the API documentation). 
 ************************************************************/
var request = require('superagent');
var q = require('q');
var format = require("string-template");

var config = require('../../../config');
var helpers = require('../../../helpers');
var errors = require('../errors');
var DLSError = errors.DLSError;
var validations = require('./validations');

/*********************************
 * Setting up Exports/Public functions
 **********************************/
exports.genericAPICaller = genericAPICaller;
exports.constructAPIUrl = constructAPIUrl;
exports.setupAPIToken = setupAPIToken;
exports.addClassIdQueryParam = addClassIdQueryParam

/*********************************
 * Public Function definitions
 **********************************/

//Generic comproDLS API caller
function genericAPICaller(apiName, method, url, params) {
    var self = this;
    var dfd = q.defer();

    //Validation
    var err = validations.genericAPICaller(apiName, method, url, params) || helpers.validations.isAuthenticated(self.orgId, self.token);
    if (err) {
        dfd.reject(err);
    } else {

        //Passed all validations, setup API Url and parameters
        var url = config.DEFAULT_HOSTS[apiName.toUpperCase()] + url;

        //Setup Delete method for superagent
        if (method === 'DELETE') {
            method = 'DEL';            
        }
       
        var requestAPI = request(method, url);

        //Setting token in Authorization header
        requestAPI = setupAPIToken(requestAPI, self.token);

        //Setup request parameters
        if (Object.keys(params).length) {
            if (method === 'GET' || method === 'HEAD') {
                requestAPI = requestAPI.query(params);
            } else {
                requestAPI = requestAPI.send(params);
            }
        }

        //Call Specified API
        requestAPI.end(function(err, response) {
            if (err) {
                err = new DLSError(errors.ERROR_TYPES.API_ERROR, err);
                dfd.reject(err);
            } else {
                dfd.resolve(response.body);
            }
        });
    }
    return dfd.promise;
};

/*********************************************************
* This function constructs the url of comproDLS API.
* Options: JSON Object having actual values to replace in API URLs
* Following are valid feilds in options object:
  {
     "orgId" : "",
     "productId" : "",
     "userId" : "",
     "activityId" : "",
     "attemptId" : "",
     "questionId" : ""
  }
*********************************************************/
function constructAPIUrl(url, options) {
    return format(url, options);
};

function addClassIdQueryParam(url, classId) {
    var queryParam = '';
    if(typeof(classId) !== "undefined" && classId !== null)
        queryParam = '?classId=' + classId;
    return url + queryParam;
};

//This function sets up comproDLS API token in request header
function setupAPIToken(request, token) {
    return request.set('Authorization', token.access_token);
};