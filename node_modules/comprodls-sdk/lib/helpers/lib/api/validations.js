/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/
/***********************************************************
 * comproDLS APIS Module Validations
 * This module contains validations for APIS module.
 ************************************************************/
var validate = require('../validator').validate;

/****************************************************
 * Setting up Exports/Public variables 
 *****************************************************/
exports.genericAPICaller = validateGenericAPICaller;

/*********************************
 * Public Function definitions
 **********************************/
function validateGenericAPICaller(apiName, method, url, params) {
    var validate_options = {
        'apiName': apiName,
        'method': method,
        'url': url,
        'params':params
    };

    var validate_constraints = {
        "apiName" : {
            "isString" : true,
            "presence" : true,
            "inclusion": {
                "within" : ["AUTH" , "PRODUCT" , "COLLAB" , "ANALYTICS" , "ACTIVITY" , "XAPI"],
                "message": "^Enter a valid API Name"
            }
        },
        "method" : {
            "isString" : true,
            "presence" : true,
            "inclusion": {
                "within" : ["GET" , "POST" , "PUT" , "DELETE"],
                "message": "^Enter a valid HTTP method"
            }
        },
        "url" : {
            "isString" : true,
            "presence" : true,
            "format": {
                "pattern": "^/.*$",
                "message": "^Url should start with a /"
            }
        },
        "params" : {
            "isObject" : true
        }
    };

    return validate(validate_options, validate_constraints);
};