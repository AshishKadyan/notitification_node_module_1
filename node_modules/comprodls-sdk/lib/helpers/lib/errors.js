/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/
/***********************************************************
 * comproDLS SDK Error Helper Module
 * This module contains helper functions for Error management
 ************************************************************/

//All possible Error types in SDK
var ERROR_TYPES = {
    "API_ERROR": "API_ERROR",
    "SDK_ERROR": "SDK_ERROR",
    "CHANNEL_SUBSCRIPTION": "CHANNEL_SUBSCRIPTION"
};

var ERROR_CATEGORY = {
    PUSHX: 'PUSHX'
};


var ERROR_STATUS = {
    ERROR: 'ERROR'
};

/****************************************************
 * Setting up Exports/Public functions and variables
 *****************************************************/
exports.DLSError = DLSError;
exports.PUSHXError = PUSHXError;
exports.ERROR_TYPES = ERROR_TYPES;
exports.ERROR_CATEGORY = ERROR_CATEGORY;

/*****************************************
* Constructor for the DLS error object
* Parameters:
*   type: Error Type. Possible values are SDK_ERROR and API_ERROR
*   err: JSON Error object. This can be:
*      1. HTTP Error Object returned by comproDLS APIs (In case of API_ERROR)
*      2. Custom Error Object(SDK_ERROR or Custom API_ERROR) with following structure  
*         {
*            "message":"[String]",
*            "description":"[String]"
*          }
******************************************/
function DLSError(type, err) {
    /* 
     * We assume only two types of errors: SDK_ERROR (default) 
     * or API_ERROR
     */
    this.type = type;
    if (type === ERROR_TYPES.API_ERROR) {
        
        //Depending on type of error (HTTP response or Custom) deal with different formats of the err object
        var msg, desc;
        if(err.response != undefined) {
            msg = err.response.body.message || err.response.body.dbErrorBody || err.response.body.code;
            desc = err.response.body.dbErrorDescription;

            // Add swagger errors
            if(err.response.body.results && err.response.body.results.errors) {
                msg = '';
                for(var idx in err.response.body.results.errors) {
                    msg += err.response.body.results.errors[idx].message + ' ';
                }
            }

            // Add request_id
            if(err.response.body.server) {
                this.server = err.response.body.server;
            }

        } else {
            msg = err.message ? err.message : "";
            desc = err.description ? err.description : "";
        }

        //Set the message and description
        this.message = msg;
        this.description = desc;
    }
    else if(type === ERROR_TYPES.PUSHX_ERROR) {

        //Set the message and description
        this.message = err.message;
        this.data = err;
    }
    else {
        this.message = err.message ? err.message : "";
        this.description = err.description ? err.description : "";
        delete err.message;
        delete err.description;
        this.data = err;
    }
    
    if (type === ERROR_TYPES.API_ERROR || type === ERROR_TYPES.PUSHX_ERROR) {
        this.httpcode = err.status;
    }
};

function PUSHXError(category, error) {

    if (category === ERROR_CATEGORY.PUSHX) {
        this.category = ERROR_CATEGORY.PUSHX;
        this.type = ERROR_TYPES.CHANNEL_SUBSCRIPTION;
        this.status = ERROR_STATUS.ERROR;
        this.message = error.message;
        this.data = error;
        this.httpcode = (error.errorDetails && error.errorDetails.statusCode) ? error.errorDetails.statusCode : 500;
    }
    else {
        this.message = 'PUSHXError called for incorrect category.';
    }
};
