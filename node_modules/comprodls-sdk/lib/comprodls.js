/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/
/***********************************************************
 * comproDLS SDK Main Module
 * This module provides definition of SDK for Javascript
 ************************************************************/
var token_manager = require('./token');
var helpers = require('./helpers');
var auth = require('./services/auth');
var activity = require('./services/activity');
var analytics = require('./services/analytics');
var collab = require('./services/collab');
var product = require('./services/product');
var xapi = require('./services/xapi');
var attempts = require('./services/attempts');
var push = require('./services/push');
var pushX = require('./services/pushX');
var pub = require('./services/pub');
var sisevents = require('./services/sisevents');
var lrs = require('./services/lrs');
var spaces = require('./services/spaces');
var config = require('./config');
var open_access = require('./open_access');
var superuser = require('./services/superuser');
var invitations = require('./services/invitations');
var workflows = require('./services/workflows');
var integrations = require('./services/integrations');
var validations = require('./token/validations');
var drive = require('./services/drive');
var taxonomy = require('./services/taxonomy');
var rules = require('./services/rules');


/*********************************
 * Setting Up Module Entry Point
 **********************************/
exports.init = init;

//Factory function to create and return a new SDK object/instance
function init(environment, realm, options) {
    return new comproDLS(environment, realm, options);
};

// Constructor for the SDK object
function comproDLS(environment, realm, options) {
    options = options || {};
    environment = environment || 'production';
    realm = realm || 'global';
    /*
     * Instance level parameters, used across all API calls. These are set to null.
     * Either authWithToken or authWithCredentials must be called to set these
     * with valid values.
     */

    /* API Token is a JSON Object with following structure
     *  {
	 *     "access_token" : [String]
     *  }
     */
    this.token = null;

    //Organization Id
    this.orgId = null;
    this.traceid = options.traceid;

    try {
      config.DEFAULT_HOSTS = config.REALM_HOSTS[realm.toUpperCase()][environment.toUpperCase()];
      if(!config.DEFAULT_HOSTS){ throw 'Invalid Environment'; }
    }
    catch (e){
      var realmObj = config.REALM_HOSTS[realm.toUpperCase()];
      var err;

      if(!realmObj) { err = new Error('Invalid Realm: ' + realm); }
      else if(!realmObj[environment.toUpperCase()]) {
        err = new Error('Invalid Environment: ' + environment);
      }
      throw err;
    }

    this.config = config;
    this.environment = environment;

    if(options.orgid && options.token) {
      var err = validations.authWithToken(options.orgid, options.token, {});
      if (err) { throw err; }
      else {
        this.token = options.token;
        this.orgId = options.orgid;
      }
    }
  // This is the case when api requires orgid but not token
    else if(options.orgid) {
      this.orgId = options.orgid;
    }
}

/****************************************
 * Setting Up SDK Public Functions/Objects
 *****************************************/
//Token Management
comproDLS.prototype.authWithCredentials = token_manager.authWithCredentials;
comproDLS.prototype.authWithToken = token_manager.authWithToken;
comproDLS.prototype.authWithExtUser = token_manager.authWithExtUser;

//Open Access SDK Functions
comproDLS.prototype.getClassEnrolmentsStat = open_access.getClassEnrolmentsStat;
comproDLS.prototype.getSingleInvitation = open_access.getSingleInvitation;

//Generic API Caller / Adaptor
comproDLS.prototype.request = helpers.api.genericAPICaller;

//Custom Service Adaptors
comproDLS.prototype.Auth = auth;
comproDLS.prototype.Activity = activity;
comproDLS.prototype.Analytics = analytics;
comproDLS.prototype.Collab = collab;
comproDLS.prototype.Product = product;
comproDLS.prototype.Xapi = xapi;
comproDLS.prototype.Attempts = attempts;
comproDLS.prototype.Push = push;
comproDLS.prototype.Pub = pub;
comproDLS.prototype.SISEvents = sisevents;
comproDLS.prototype.LRS = lrs;
comproDLS.prototype.PushX = pushX;
comproDLS.prototype.Spaces = spaces;
comproDLS.prototype.Superuser = superuser;
comproDLS.prototype.Invitations = invitations;
comproDLS.prototype.Workflows = workflows;
comproDLS.prototype.Integrations = integrations;
comproDLS.prototype.Drive = drive;
comproDLS.prototype.Taxonomy = taxonomy;
comproDLS.prototype.Rules = rules;
