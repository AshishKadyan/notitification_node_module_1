/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/
/***********************************************************
 * comproDLS SDK Open Access Manager Module
 * Provides Open Access functions for the SDK
 ************************************************************/
var q = require('q');
var request = require('superagent');
var helpers = require('../helpers');
var DLSError = helpers.errors.DLSError;

/*************************************
 * Setting up Exports/Public functions
 *************************************/

// These functions need to be moved to the corresponding adapter
// They were created here since these functions requires the orgid but not token, But the initialiation function required both token and orgid to be initialized, Now we have improved the initialization function for orgid.

exports.getClassEnrolmentsStat = getClassEnrolmentsStat;
exports.getSingleInvitation = getSingleInvitation;

/*********************************
 * Public Function definitions
 **********************************/

/**
 * options = {
 *  classid: 'string',
 *  role: 'string
 * }
 **/
function getClassEnrolmentsStat(organizationId, options) {
  var self = this;
  //Initializing promise
  var dfd = q.defer(), err = {};
  //Validations
  if(organizationId && options && options.classid) {
    //Passed all validations, Contruct API url
    var url = self.config.DEFAULT_HOSTS['ANALYTICS'] + self.config.ANALYTICS_API_URLS.getClassEnrolmentsStat;
    url = helpers.api.constructAPIUrl(url, { orgId: organizationId });

    //Setup request with URL
    var requestAPI = request.get(url).query(options);
    if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }

    requestAPI.end(function(err, response) {
      if(err) {
        err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
        dfd.reject(err);
      }
      else { dfd.resolve(response.body); }
    });
  }
  else {
    err.message = err.description = 'Mandatory params not found in request body : [orgid, classid]';
    err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
    dfd.reject(err);
  }
  return dfd.promise;
}

/* options =  {
    "context_id": "string", //class id to be invited -required
    "invitationid" : "string", //unique invitation id which is to be fetched -required
    "context" : "string", //context for invitation e.g. class_enrollment -required
  };
*/
function getSingleInvitation(organizationId, options) {
    var self = this;
    var err = {};
    // Initializing promise
    var dfd = q.defer();
    if (organizationId && options && options.context_id && options.context && 
        options.invitationid) {
      // Passed all validations, Contruct API url
      var url = self.config.DEFAULT_HOSTS.AUTH + self.config.AUTH_API_URLS.getSingleInvitation;
      //Contruct path parameters
      url = helpers.api.constructAPIUrl(url, 
            { orgId: organizationId, invitationId: options.invitationid });
      var queryParam = { context: options.context, context_id: options.context_id };
  
      // Setup request with URL and Params
      var requestAPI = request.get(url).query(queryParam);
      if(self.traceid) { requestAPI.set('X-Amzn-Trace-Id', self.traceid); }
  
      requestAPI.end(function (error, response) {
        if (error) {
          err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, error);
          dfd.reject(err);
        }
        else {
          dfd.resolve(response.body);
        }
      });
    }
    else {
      err.message = err.description = 'organizationId or context_id or context '+
                                      'or invitationid not found in request options.';
      err = new DLSError(helpers.errors.ERROR_TYPES.SDK_ERROR, err);
      dfd.reject(err);
    }
    return dfd.promise;
  }

