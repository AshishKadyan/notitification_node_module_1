/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/
/***********************************************************
 * comproDLS SDK Token Manager Module
 * Provides Token managements functions for the SDK
 ************************************************************/
var request = require('superagent');
var q = require('q');

var helpers = require('../helpers');
var DLSError = helpers.errors.DLSError;
var validations = require('./validations');

/*************************************
 * Setting up Exports/Public functions
 *************************************/
exports.authWithExtUser = authWithExtUser;
exports.authWithToken = authWithToken;

function authWithExtUser(organizationId, options) {
    var self = this;
    var dfd = q.defer();

    //Validation
    var err = validations.validateAuthWithExtUser(organizationId, options);
    if (err) {
        dfd.reject(err);
    } else {
        //Passed all Validations, Setup the GET TOKEN API URL.
        var url = this.config.DEFAULT_HOSTS['AUTH'] + this.config.AUTH_API_URLS.getExtUserTokenAPI;
        url = helpers.api.constructAPIUrl(url, {"orgId" : organizationId});

        //Setup Credentials
        var params = {
            "ext_user_id": options.ext_user_id
        };
        //Call the comproDLS GET TOKEN API
        request.post(url).send(params).end(function(err, response) {
            if (err) {
                //API Error, Construct Standard SDK error response
                err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
                dfd.reject(err);
            } else {

                //Success, Extract the Token & Other useful information
                var token = {
                    'access_token': response.body.access_token
                };
                var user = response.body.user;
                var responseObj = {
                    'token': token,
                    'user': user,
                    'metrics': response.body.metrics
                }

                //Setting token and organisationid in comproDLS instance
                self.token = token;
                self.orgId = user.org.id;

                dfd.resolve(responseObj);
            }
        });
    }
    return dfd.promise;
};

function authWithToken(organizationId, token, options) {
    var self = this;
    var dfd = q.defer();

    //Validation
    var err = validations.authWithToken(organizationId, token ,options);
    if (err) {
        dfd.reject(err);
    } else {

        //Setting token and organisationid in comproDLS instance
        self.token = token;
        self.orgId = organizationId;

        if (options && options.getuserdetails) {
            self.Auth().getUserProfile().then(function(response) {
                var responseObj = {
                    'token': self.token,
                    'user': response
                }
                dfd.resolve(responseObj);
            }, function(err) {
                err = new DLSError(helpers.errors.ERROR_TYPES.API_ERROR, err);
                dfd.reject(err);
            });
        } else {
            dfd.resolve(self.token);
        }
    }
    return dfd.promise;
};
