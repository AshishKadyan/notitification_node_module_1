/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/
/***********************************************************
 * comproDLS Token Module Validations
 * This module contains validations for token manager module.
 ************************************************************/
var validate = require('../helpers').validations.validate;

/****************************************************
 * Setting up Exports/Public variables 
 *****************************************************/
exports.authWithToken = validateAuthWithToken;
exports.validateAuthWithExtUser = validateAuthWithExtUser;

/*********************************
 * Public Function definitions
 **********************************/
function validateAuthWithToken(organizationId, token ,options) {
    var validate_options = {
        'organization': organizationId,
        'token': token,
        'options': options
    };

    var validate_constraints = {
        "organization": {
            "isString": true,
            "presence": true
        },
        "token": {
            "isObject": true,
            "presence": true,
            "contains": ["access_token"]
        },
        "token.access_token": {
            "isString": true,
            "presence": true
        },
        "options": {
            "isObject": true
        }
    };

    return validate(validate_options, validate_constraints);
};

function validateAuthWithExtUser(organizationId, options) {
    var validate_options = {
        'organization': organizationId,
        'options': options
    };

    var validate_constraints = {
        "organization": {
            "isString": true,
            "presence": true
        },
        "options": {
            "isObject": true,
            "presence": true,
            "contains": ["ext_user_id"]
        },
        "options.ext_user_id": {
            "isString": true,
            "presence": true
        }
    };

    return validate(validate_options, validate_constraints);
};

