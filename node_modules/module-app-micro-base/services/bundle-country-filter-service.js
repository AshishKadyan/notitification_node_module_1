/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/


/**********************************************************************
 * Provides functions for getting class related data
 ***********************************************************************/
'use strict';
/************************************
* Internal npm Modules
************************************/
const config = require('./../../../server/config');
const bundleCountryConfig = require('./../data/bundle-country-mapping').umbrellaCountryTagging;

/************************************
* Private variables
************************************/
const envBundleCountryConfig = bundleCountryConfig[`${config.app.dlsEnv}`];

/************************************
* Public function definitions
************************************/

exports.filterProductBasedOnCountryCode = filterProductBasedOnCountryCode;

/************************************
* Private function/variable definitions
************************************/

/**
 * Filter bundle based on env country configuration
 * This function is used for excluding/including products from the bundle array
 */
function filterProductBasedOnCountryCode(bundleCode, countriesHashMap) {
    const countryConfig = envBundleCountryConfig && envBundleCountryConfig[bundleCode];
    if(countryConfig) {
        const isIncludedFound = countryConfig.countriesInclude && countryConfig.countriesInclude.find((country_code) => countriesHashMap.hasOwnProperty(country_code));
        if(!isIncludedFound && countryConfig.countriesInclude.length) {
            return false;
        } else if(!isIncludedFound) {
            if(_isExcludedForAllCountries(countryConfig.countriesExclude, countriesHashMap)) {
                return false;
            }
        }
    }
    return true;
}

/**
 * Function @params {countries list to exclude product from, countries hash for spaces( or user) }
 * This function returns true if all countries have present in exclude list.
 * If the country is not present in exclude list default assume it is in the include list.
 */

function _isExcludedForAllCountries(countriesExclude, countriesHashMap) {
    if(countriesExclude) {
        return !(Object.keys(countriesHashMap).find((country_code)=> countriesExclude.indexOf(country_code) == -1));
    }
    return false;
}