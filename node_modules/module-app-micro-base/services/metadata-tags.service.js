/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/


/**********************************************************************
 * Provides functions for getting class related data
 ***********************************************************************/
'use strict';
/************************************
* Internal npm Modules
************************************/
const config = require('./../../../server/config');
const metaDataTagsDefinition = require('./../data/metadata-tags-definition').metadataTagsDefinition;
const metadataTagIds = require('./../data/metadata-tags-definition').metadataTagIds;
/************************************
* Private variables
************************************/
const metaDataTagsConfig = metaDataTagsDefinition[config.app.dlsEnv !== 'prod1' ? 'non-prod' : 'prod1'];
const metadataTagIdConfig = metadataTagIds[config.app.dlsEnv !== 'prod1' ? 'non-prod' : 'prod1'];

const MetadataTagsConstants = {
    'CEFR_LEVEL': 'LEVEL/CEFR_LEVEL',
    'SEGMENT': 'SEGMENT'
}
/************************************
* Public function definitions
************************************/

exports.getMetaDataTagsConfig = getMetaDataTagsConfig;
exports.getAllBuilderTags = getAllBuilderTags;

/************************************
* Private function/variable definitions
************************************/


function getMetaDataTagsConfig() {
    return metaDataTagsConfig.tags;
}

/**
 * function @params {tagTypeArray: e.g ['SEGMENT', 'CEFR_LEVEL']}
 * map MMA tags value and its parent value with hierarchical structure (e.g. 'grandParentTagId/parentTagId/childTagId': 'value')
 */
function getAllBuilderTags(tagTypeArray) {
    const metaDataTagJson = getMetaDataTagsConfig();
    let returnData = {};
    tagTypeArray.forEach(tagType => {
        let { id, tags} = _getTagsIds(MetadataTagsConstants[tagType], metaDataTagJson);
        Object.keys(tags).forEach((tagId) => {
            let obj = {
                value: tags[`${tagId}`].value,
                type: tagType
            }
            if(tags[`${tagId}`].teacher_library_parent_tag_id) {
                obj["parent_tag_value"] = tags[tags[`${tagId}`].teacher_library_parent_tag_id].value;
            }
            returnData[`${id}/${tagId}`] = obj;
        })
    });
    return returnData;
}

function _getTagsIds(tagType, tagsDefinition) {
    let tags = tagsDefinition;
    let id;
    if(tagType.indexOf('/') > -1) {
        let childTags = tagType.split("/");
        childTags.forEach((tag) => {
            tags = tags[metadataTagIdConfig[tag]].tags;
            if(id) {
                id += '/'+ metadataTagIdConfig[tag];
            } else {
                id = metadataTagIdConfig[tag];
            }
        });
    } else {
        tags = tags[metadataTagIdConfig[tagType]].tags;
        id = metadataTagIdConfig[tagType];
    }
    return { id, tags };
}