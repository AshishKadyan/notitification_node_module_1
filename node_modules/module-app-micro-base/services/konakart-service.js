//Get Application config
const config = require('./../../../server/config');
const request = require('superagent');
const appConstants = require('../libs/app-constants');
const KONAKART_ENDPOINT_TYPES = {
    KONAKART_CUSTOM: "KONAKART_CUSTOM"
};
const OrderStatus = {
    PENDING_STATUS: 1,
    PROCESSING_STATUS: 2,
    DELIVERED_STATUS: 3,
    WAITING_PAYMENT_STATUS: 4,
    PAYMENT_RECEIVED_STATUS: 5,
    PAYMENT_DECLINED_STATUS: 6,
    PAYMENT_CANCELLED_STATUS: 8,
    REJECTED_STATUS: 12,
    ACCEPTED_BY_SAP: 11,
    PAYMENT_REFUND_APPROVED: 9,
    TIMEOUT_ERROR: "TIMEOUT_ERROR"
};

class KonakartService {

    constructor(reqObject, resObject) {
        this._url = config.app.konakart.apiUrl;
        this._custom_url = config.app.konakart.KKCustomApiUrl;
        this._reqObject = reqObject;
        this._resObject = resObject;
    }

    set sessionId(sessionId) {
        this._sessionId = sessionId;
    }

    get sessionId() {
        return this._sessionId;
    }

    // This function returns true if the user email starts with "mqa".
    logEnabledForEmail() {
        //return this._reqObject.session.email.toLowerCase().startsWith("mqa");
        return true;
    }

    async invokePreLoginApi(methodName, data, apiType) {
        try {
            // An array of Excluded methods for request and response logs.
            const methodsExcludedForLogs = ["login", "registerCustomer", "getAllCountries"];
            data.s = config.app.konakart.storeId;
            data.f = methodName;

            if(this.logEnabledForEmail() && methodsExcludedForLogs.indexOf(methodName) === -1 && config.app.konakart.logKKpayloads) {
                syslog.info(`Email: ${this._reqObject.session.email} Method Name: ${methodName} Request: ${JSON.stringify(data)}`)
            }
            var response;
            if (apiType === KONAKART_ENDPOINT_TYPES.KONAKART_CUSTOM) {
                response = await request.post(this._custom_url).send(data).set({'Content-Type': 'application/json; charset=utf-8'});
            } else {
                response = await request.post(this._url).send(data).set({'Content-Type': 'application/json; charset=utf-8'});
            }
            if (response.body.e) {
                // throw a custom error in case Konakart throws an exception
                var errorMessage = `KKException in method ${methodName} : ${response.body.m}`
                throw new KonakartError(errorMessage, appConstants.APP.ERROR_CODES.KONAKART.KONAKART_EXCEPTION, response.body.code);
            } else {
                if(this.logEnabledForEmail() && methodsExcludedForLogs.indexOf(methodName) === -1 && config.app.konakart.logKKpayloads) {
                    syslog.info(`Email: ${this._reqObject.session.email} Method Name: ${methodName} Response: ${JSON.stringify(response.body)}`);
                }
                return response;
            }
        } catch (error) {
            if (error.tag) {
                throw error;
            } else {
                errorMessage = `ERROR accessing konakart API, MethodName: ${methodName}, errorMessage: ${error.message}`
                throw new KonakartError(errorMessage, appConstants.APP.ERROR_CODES.KONAKART.KONAKART_API_FAILURE, error.status);
            }
        }
    }

    async invokePostLoginApi(methodName, data , apiType) {
        data.sessionId = data.sessionId ? data.sessionId: this._sessionId;
        data.languageId = -1;
        return this.invokePreLoginApi(methodName, data , apiType);

    }

    async doesCustomerExistForEmail(email) {
        let req = { emailAddr: email ? email : this._reqObject.session.email };
        return this.invokePreLoginApi("doesCustomerExistForEmail", req);
    }

    async registerCustomer() {
        let req = {
            custReg: {
                emailAddr: this._reqObject.session.email,
                firstName: this._reqObject.session.firstName,
                lastName: this._reqObject.session.lastName,
                noGender: true,
                noBirthDate: true,
                noTelephone: true,
                password: config.app.konakart.password,
                postcode: config.app.konakart.custRegAddress.postcode,
                streetAddress: config.app.konakart.custRegAddress.streetAddress,
                city: config.app.konakart.custRegAddress.city,
                countryId: config.app.konakart.custRegAddress.countryId,
            }
        }
        return this.invokePreLoginApi("registerCustomer", req);
    }

    async login() {
        let req = {
            emailAddr: this._reqObject.session.email,
            password: config.app.konakart.password
        }
        return this.invokePreLoginApi("login", req);
    }

    async loginWithEmail(email) {
        let req = {
            emailAddr: email,
            password: config.app.konakart.password
        }
        return this.invokePreLoginApi("login", req);
    }

    async GetRecentOrdersByProductForUser(email, featureKey, featureId, limit) {
        try {
            let res = await this.doesCustomerExistForEmail(email);
            if (!res.body.r) {
                const retObj = {
                    body: {
                        r: {
                            orderArray: [],
                            error: `User with Email: ${email} does not exist`
                        }
                    }
                }
                return Promise.resolve(retObj);
            }
            res = await this.loginWithEmail(email);
            let req = {
                sessionId: res.body.r,
                dataDesc: {
                    orderBy: "ORDER_BY_ORDER_NUMBER_DESCENDING",
                    custom8: `${featureKey}=${featureId}`,
                    limit: limit ? limit : 1
                }
            }
            return this.invokePostLoginApi("getOrdersPerCustomer", req);
        } catch(err){
            throw(err);
        }
    }

    async searchForOrdersPerCustomer(orderSearch, options = undefined) {
        let req = {
            orderSearch: orderSearch,
            ...(options != undefined && options.dataDesc != undefined) && {dataDesc: options.dataDesc}
        }
        return this.invokePostLoginApi("searchForOrdersPerCustomer", req);
    }
    async searchForProducts(isbn) {
        let req = {
            prodSearch: {
                searchText: "IELTS" //TODO: Vipul - Need a better way to search or a store this key
            },
            dataDesc: {
                custom1: isbn
            }
        }
        return this.invokePostLoginApi("searchForProducts", req);
    }

    async searchForProductsWithOptions(isbn,searchOptions) {
        let req = {
            prodSearch: {
                searchText: "IELTS" 
            },
            dataDesc: {
                custom1: isbn
            },
            options: searchOptions
        }
        return this.invokePostLoginApi("searchForProductsWithOptions", req);
    }

    async removeBasketItemsPerCustomer() {
        return this.invokePostLoginApi("removeBasketItemsPerCustomer", {});
    }

    async addToBasket(productId) {
        let req = {
            item: {
                productId: productId,
                quantity: 1
            }
        }
        return this.invokePostLoginApi("addToBasket", req);
    }

    async getBasketItemsPerCustomerWithOptions(options) {
        let req = {
            options:options
        }
        return this.invokePostLoginApi("getBasketItemsPerCustomerWithOptions", req);
    }

    async getBasketItemsPerCustomer() {
        return this.invokePostLoginApi("getBasketItemsPerCustomer", {});
    }

    async createOrder(basketItemArray) {
        let req = { basketItemArray: basketItemArray };
        return this.invokePostLoginApi("createOrder", req);
    }

    async createOrderWithOptions(basketItemArray,options) {
        let req = { basketItemArray: basketItemArray , options:options };
        return this.invokePostLoginApi("createOrderWithOptions", req);
    }

    async getPaymentGateways(order) {
        let req = { order: order };
        return this.invokePostLoginApi("getPaymentGateways", req);
    }

    async getOrderTotals(order) {
        let req = { order: order };
        return this.invokePostLoginApi("getOrderTotals", req);
    }

    async saveOrder(order) {
        let req = { order: order };
        return this.invokePostLoginApi("saveOrder", req);
    }

    async getPaymentDetails(orderId) {
        let req = {
            moduleCode: config.app.konakart.paymentModuleCode,
            orderId: orderId
        };
        return this.invokePostLoginApi("getPaymentDetails", req);
    }

    async getOrderStatus(orderId) {
        let req = { orderId: orderId };
        return this.invokePostLoginApi("getOrderStatus", req);
    }
    async getOrder(orderId) {
        let req = { orderId: orderId };
        return this.invokePostLoginApi("getOrder", req);
    }

    async getProduct(productId) {
        let req = { productId: productId };
        return this.invokePostLoginApi("getProduct", req);
    }

    async changeOrderStatus(orderId, status, comments) {
        let req = { status: status, orderId: orderId, comments:comments};
        return this.invokePostLoginApi("changeOrderStatus", req);
    }

    async editCustomerAddress(address) {
        let req = {
            addr: address
        }
        return this.invokePostLoginApi("editCustomerAddress", req);
    }

    async getDefaultAddressPerCustomer() {
        return this.invokePostLoginApi("getDefaultAddressPerCustomer", {});
    }

    async getAllCountries() {
        return this.invokePreLoginApi("getAllCountries", {});
    }

    async getZonesPerCountry(countryId) {
        let req = {
            countryId: countryId
        }
        return this.invokePreLoginApi("getZonesPerCountry", req);
    }

    async postOrderToSap(orderId) {
        let req = {
            orderId: orderId
        }
        return this.invokePostLoginApi("postOrderToSap", req , KONAKART_ENDPOINT_TYPES.KONAKART_CUSTOM);
    }

    async getCurrency(currencyCode) {
        let req = {
            currencyCode: currencyCode
        }
        return this.invokePreLoginApi("getCurrency", req );
    }

    async addToBasketWithOptions(productId,options) {
        let req = {
            item: {
                productId: productId,
                quantity: 1
            },
            options:options
        }
        return this.invokePostLoginApi("addToBasketWithOptions", req);
    }
}

class KonakartError extends Error {
    constructor(message, errorCode, status) {
        super(message);
        this.tag = appConstants.APP.ERROR_TYPES.KONAKART.KONAKART_ERROR;
        this.status = status;
        this.errorCode = errorCode;
    }
}

module.exports.KonakartService = KonakartService;
module.exports.KonakartError = KonakartError;
module.exports.OrderStatus = OrderStatus;