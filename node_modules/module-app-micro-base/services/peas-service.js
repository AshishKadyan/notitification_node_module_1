/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/


/**********************************************************************
 * Provides functions for getting class related data
 ***********************************************************************/
'use strict';
/************************************
* Internal npm Modules
************************************/
const peasConfig = require('./../../../server/config').app.peas;
//Get App Constants
const appConstants = require('../libs/app-constants');
const bundleService = require('./bundle-service');

const ERROR_CODES_INFO = _getErrorCodes();
/************************************
 * External npm Modules
 ************************************/
let q = require('q');
const requestModule = require('request');

// ************************************
// * Module exports  Public functions
// ************************************
exports.getPermissionByAccessCode = getPermissionByAccessCode;
exports.getProductByAccessCode = getProductByAccessCode;
exports.getBundleByAccessCode = getBundleByAccessCode;
exports.validateAccessCodeForUser = validateAccessCodeForUser;
exports.activateProduct = activateProduct;
exports.activateProductByMetadata = activateProductByMetadata;
exports.getUserActivations = getUserActivations;
exports.getUserEntitlements = getUserEntitlements;

exports.getProducts = getProducts;
exports.getProduct = getProduct;
exports.getEntitlements = getEntitlements;
exports.getBatches = getBatches;
exports.getBatch = getBatch;
exports.getPermissions = getPermissions;
exports.manageProduct = manageProduct;
exports.manageEntitlement = manageEntitlement;
exports.manageBatch = manageBatch;
exports.managePermission = managePermission;
exports.revokeProductByMetadata = revokeProductByMetadata;


/************************************
* Public function definitions
************************************/
function getPermissionByAccessCode(accessCode) {
    var deferred = q.defer();
    
    _authenticateUser()
    .then(token => _getPermissionByAccessCode(accessCode, token))
    .then(response => deferred.resolve(response))
    .catch(error => deferred.reject(error));

    return deferred.promise;
}

function getProductByAccessCode(accessCode) {
    var deferred = q.defer();
    
    getPermissionByAccessCode(accessCode)
    .then(response => _getProductById(response.data.entitlement["product_id"], response.token))
    .then(response => deferred.resolve(response))
    .catch(error => deferred.reject(error));

    return deferred.promise;
}

function getBundleByAccessCode(accessCode) {
    var deferred = q.defer();
    
    getPermissionByAccessCode(accessCode)
    .then(permissionResponse => {
        return bundleService.getBundleById(String(permissionResponse.data.entitlement_id), {})
        .then(bundleResponse => deferred.resolve({
            ...bundleResponse,
            token : permissionResponse.token,
            permission : permissionResponse.data
        })).catch(error => deferred.reject(error));
    }).catch(error => deferred.reject(error));
    return deferred.promise;
}

function validateAccessCodeForUser(optionParams) {
    var deferred = q.defer();
    
    getBundleByAccessCode(optionParams.accessCode)
    .then(bundleResponse => {
        return _getUserActivations({"user_id" : optionParams.user_id, "is_active" : 1, "is_paginated" : false}, bundleResponse.permission.entitlement_id, bundleResponse.token)
        .then(userActivations => _validateAccessCode(bundleResponse.permission, bundleResponse.data, userActivations, optionParams))
        .then(validationResponse => {
            if(validationResponse.valid) return deferred.resolve({
                "data" : validationResponse, 
                "token" : bundleResponse.token,
                "bundle" : bundleResponse.data,
                "permission" : bundleResponse.permission
            });
            else return deferred.reject(_createErrorResponse(validationResponse.error.code, "", "validateAccessCodeForUser", validationResponse.error));
        }).catch((error) => deferred.reject(error));;    
    }).catch((error) => deferred.reject(error));

    return deferred.promise;
}

function activateProduct(optionParams) {
    var deferred = q.defer();
    
    validateAccessCodeForUser(optionParams)
    .then(validationResponse => {
        return _activateProduct(optionParams.user_id, validationResponse.permission.id, validationResponse.permission.entitlement.metadata.Duration, validationResponse.token)
        .then(activationResponse => {
            activationResponse.data.bundle = validationResponse.bundle;
            deferred.resolve(activationResponse);
        });

    }).catch(error => deferred.reject(error));

    return deferred.promise;
}

function getUserActivations(optionParams) {
    var deferred = q.defer();

    _authenticateUser()
    .then(token => {
        optionParams.is_paginated = false;
        return _getUserActivations(optionParams, undefined, token);
    })
    .then(userActivations => deferred.resolve({"data" : userActivations}))
    .catch(error => deferred.reject(error));

    return deferred.promise;
}

function getUserEntitlements(optionParams) {
    var deferred = q.defer();
    getUserActivations(optionParams)
    .then(userActivationsResponse => {
        if(userActivationsResponse && Array.isArray(userActivationsResponse.data)) {
        let entitlementIds = Object.keys(userActivationsResponse.data.reduce((acc, {permission : {entitlement_id}}) => Object.assign(acc, {[entitlement_id] : entitlement_id}), {}));
        let bundlePromises = entitlementIds.map(entitlementId => bundleService.getBundleById(entitlementId).then(bundle => bundle).catch(error => error));
        return Promise.all(bundlePromises)
        .then(bundles => {
            let bundlesObject = bundles.reduce((acc, bundle, i) => Object.assign(acc, {[entitlementIds[i]] : bundle.status === "success" ? bundle.data.products.map(({id}) => id) : bundle.error.message}), {});
            let data = userActivationsResponse.data.map(userActivation => {
                return {
                    "entitlement_id" : userActivation.permission.entitlement_id,
                    "activated_at" : userActivation.activated_at,
                    "ended_at" : userActivation.ended_at,
                    "expired_at" : userActivation.permission.expired_at,
                    "products" : Array.isArray(bundlesObject[userActivation.permission.entitlement_id]) ? bundlesObject[userActivation.permission.entitlement_id] : [],
                    "bundle_error" : !Array.isArray(bundlesObject[userActivation.permission.entitlement_id]) ? bundlesObject[userActivation.permission.entitlement_id] : undefined
                };
            });
            return {data};
        }).catch(error => deferred.reject(error));
        } else deferred.reject(userActivationsResponse);
    })
    .then(data => deferred.resolve(data))
    .catch(error => deferred.reject(error));

    return deferred.promise;
}

function activateProductByMetadata(optionParams) {
    var deferred = q.defer();

    _activateProductByMetadata(optionParams)
    .then(activationResponse => {
        deferred.resolve(activationResponse);
    }).catch(error => deferred.reject(error));

    return deferred.promise;
}
  
function getProducts(options) {
    var deferred = q.defer();
    
    _authenticateUser()
    .then(token => _getProducts(options, token))
    .then(response => deferred.resolve(response))
    .catch(error => deferred.reject(error));

    return deferred.promise;
}

function getProduct(options) {
    var deferred = q.defer();
    
    _authenticateUser()
    .then(token => _getProduct(options, token))
    .then(response => deferred.resolve(response))
    .catch(error => deferred.reject(error));

    return deferred.promise;
}

function getBatch(options) {
    var deferred = q.defer();
    
    _authenticateUser()
    .then(token => _getBatch(options, token))
    .then(response => deferred.resolve(response))
    .catch(error => deferred.reject(error));

    return deferred.promise;
}

function getEntitlements(options) {
    var deferred = q.defer();
    
    _authenticateUser()
    .then(token => _getEntitlements(options, token))
    .then(response => deferred.resolve(response))
    .catch(error => deferred.reject(error));

    return deferred.promise;
}

function getBatches(options) {
    var deferred = q.defer();
    
    _authenticateUser()
    .then(token => _getBatches(options, token))
    .then(response => deferred.resolve(response))
    .catch(error => deferred.reject(error));

    return deferred.promise;
}

function getPermissions(options) {
    var deferred = q.defer();
    
    _authenticateUser()
    .then(token => _getPermissions(options, token))
    .then(response => deferred.resolve(response))
    .catch(error => deferred.reject(error));

    return deferred.promise;
}

function manageProduct(request) {
    var deferred = q.defer();

    _authenticateUser()
    .then(token => {

        let promise;
        if(request.options.mode == "create") {
        	request.product.metadata.Tabs = [];
        	request.product.metadata.StaffID = "5";
        	request.product.metadata.CreationDate = new Date(new Date().toString().split('GMT')[0]+' UTC').toISOString();
        	request.product.metadata.CMS_Setup_Complete = "Y";
            promise = _createProduct(request.product, token);
        } else if(request.options.mode == "update") {
            promise = _updateProduct(request.product, token);
        } else if(request.options.mode == "delete") {
            promise = _deleteProduct(request.product, token);
        }

        promise.then(function(response) {
            deferred.resolve({
                "status" : "success",
                "data" : response.data
            });
        }).catch(error => deferred.reject(error));

    }).catch(error => deferred.reject(error));

    return deferred.promise;
}

function manageEntitlement(optionsParams) {
    var deferred = q.defer();

    _authenticateUser()
    .then(token => {
        let options = {
            "token" : token,
            "CreationDate" : new Date(new Date().toString().split('GMT')[0]+' UTC').toISOString(),
            "Duration" : optionsParams.duration,
            "Visibility" : "Public",
            "Type": "duration",
            "QACheck": "N",
            "EndOfYearBreakPoint": "8",
            "EndOfYearOffset": "1",
            "UsageMax": "1",
            "LimitActivation": "Y",
            "Demo": "Y",
            "ReleaseEveryNYears": 0,
            "StaffID": "5",
            "Active": optionsParams.active,
            "entitlement_type_id" : 1,
            "product_id" : optionsParams.productId,
            "entitlementId" : optionsParams.entitlementId,
            "CMS_Notes" : optionsParams.notes
        };

        let promise;
        if(optionsParams.mode == "create") {
            promise = _createEntitlement(options);
        } else if(optionsParams.mode == "update") {
            promise = _updateEntitlement(options);
        }

        promise.then(function(response) {
            deferred.resolve({
                "status" : "success",
                "data" : response.data
            });
        }).catch(error => deferred.reject(error));

    }).catch(error => deferred.reject(error));

    return deferred.promise;
}

function manageBatch(optionsParams) {
    var deferred = q.defer();

    _authenticateUser()
    .then(token => {
        let options = {
            "token" : token,
            "entitlement_id" : optionsParams.entitlementId,
            "proof_pattern_id" : 1,
            "admin_id" : 5,
            "name" : optionsParams.name,
            "total_codes": optionsParams.totalCodes,
            "limit": optionsParams.limit,
            "is_active": optionsParams.isActive,
            "batchId" : optionsParams.batchId,
            "expired_at": optionsParams.expired_at
        };

        let promise;
        if(optionsParams.mode == "create") {
            promise = _createBatch(options);
        } else if(optionsParams.mode == "update") {
            promise = _updateBatch(options);
        }

        promise.then(function(response) {
            deferred.resolve({
                "status" : "success",
                "data" : response.data
            });
        }).catch(error => deferred.reject(error));

    }).catch(error => deferred.reject(error));

    return deferred.promise;
}

function managePermission(optionsParams) {

    var deferred = q.defer();

    _authenticateUser()
    .then(token => {
        let options = {
            "token" : token,
            "entitlement_id" : optionsParams.entitlementId,
            "batch_id" : optionsParams.batchId,
            "proof" : optionsParams.proof,
            "limit": optionsParams.limit,
            "is_active": optionsParams.isActive,
            "expired_at" : optionsParams.expiredAt,
            "released_at" : optionsParams.releasedAt
        };

        let promise;
        if(optionsParams.mode == "create") {
            promise = _createNewPermission(options);
        } else if(optionsParams.mode == "update") {
            options.permissionId = optionsParams.permissionId;
            promise = _updatePermission(options);
        }

        promise.then(function(response) {
            deferred.resolve({
                "status" : "success",
                "data" : response.data
            });
        }).catch(error => deferred.reject(error));

    }).catch(error => deferred.reject(error));
    
    return deferred.promise;
}

function revokeProductByMetadata(optionParams = {}) {

    optionParams.key = optionParams.key || "SAP_ID";
    var deferred = q.defer();
    let userActivationOptions = {"user_id" : optionParams.user_id, "is_active" : 1, "is_paginated" : false, "metadata" : {"key" : optionParams.key}};
    userActivationOptions.metadata[optionParams.key] = optionParams[optionParams.key];
    let authToken;
    _authenticateUser()
    .then(token => authToken = token)
    .then(() => _getUserActivations(userActivationOptions, undefined, authToken))
    .then(userActivations => {
        if(userActivations && userActivations.length) {
            let d = new Date();
            let endedAt = d.getUTCFullYear().toString()+"-"+((d.getUTCMonth()+1).toString().length==2?(d.getUTCMonth()+1).toString():"0"+(d.getUTCMonth()+1).toString())+"-"+(d.getUTCDate().toString().length==2?d.getUTCDate().toString():"0"+d.getUTCDate().toString())+" "+(d.getUTCHours().toString().length==2?d.getUTCHours().toString():"0"+d.getUTCHours().toString())+":"+((parseInt((d.getUTCMinutes()/5)*5)).toString().length==2?(parseInt((d.getUTCMinutes()/5)*5)).toString():"0"+(parseInt((d.getUTCMinutes()/5)*5)).toString())+":00";
            let formObject = {
                "ended_at" : endedAt
            };
            return _updateActivation(userActivations[0].id, formObject, authToken);
        } else {
            deferred.reject(_createErrorResponse("928", "No active subscriptions", "revokeProductByMetadata"))
        }
    }).then((response) => deferred.resolve(response))
    .catch(error => deferred.reject(error));
    
    return deferred.promise;
}
/************************************
* Private function/variable definitions
************************************/
function _authenticateUser() {
    var deferred = q.defer();
    
    const optionParams = {
        "url": peasConfig.domain + "/token",
        "method": 'POST',
        "headers": {
          'Content-Type': 'application/json'
        },
        "json" : true,
        "body": {
            "origin_url": peasConfig.origin_url,
            "secret_key": peasConfig.secret_key
        }
    };
    
    syslog.info(`PEAS API domain: ${peasConfig.domain}`);

    
    requestModule(optionParams, function (error, response, body) {
            
        if (error) {
            deferred.reject(_createErrorResponse("906", error, "_authenticateUser"));
        } else {
            if(typeof body === "object") {
                if(body.data && body.data.status == 401) {
                    deferred.reject(_createErrorResponse("929", {response, body}, "_authenticateUser"));
                    return; 
                }
                deferred.resolve("Bearer " + body.data.token);    
            } else {
                deferred.reject(_createErrorResponse("911", {response, body}, "_authenticateUser"));
            }
        }
    });
    
    return deferred.promise;
}

function _activateProductByMetadata(optionParams) {
    var deferred = q.defer();

    optionParams.key = optionParams.key || "SAP_ID";

    let authToken, entitlement, bundle, permission = {
        "is_active" : true,
        "limit" : 1,
        "activations" : []
    };

    _authenticateUser()
    .then(token => { // Get first product
        authToken = token;
        return _getProducts(Object.assign({}, {["meta." + optionParams.key]: optionParams[optionParams.key]}), token)
        .then(productsResponse => {
            if(Array.isArray(productsResponse.data.data) && productsResponse.data.data.length==0) {
                deferred.reject(_createErrorResponse("918", "", "_activateProductByMetadata", productsResponse.data.data));
            } else return productsResponse.data.data[0];
        });
    }).then(product => _getEntitlements({"product_id" : product.id}, authToken)) // Get first entitlement
    .then(entitlementsResponse => { // Get C1 bundle
        entitlement = entitlementsResponse.data.data[0];
        permission.entitlement = entitlement;
        return bundleService.getBundleById(String(entitlement.id), {});
    }).then(bundleResponse => { // Get User Activation
        bundle = bundleResponse.data;
        return _getUserActivations({"user_id" : optionParams.user_id, "is_active" : 1, "is_paginated" : false}, entitlement.id, authToken);
    })
    .then(userActivations => _validateAccessCode(permission, bundle, userActivations, optionParams))
    .then(validationResponse => {                 
        if(validationResponse.valid) {
            return _createPermission(authToken, entitlement.id);
        } else {
            return deferred.reject(_createErrorResponse(validationResponse.error.code, "", "validateAccessCodeForUser", validationResponse.error));
        }
    })
    .then(permissionResponse => _activateProduct(optionParams.user_id, permissionResponse.data.data.permission.id, entitlement.metadata.Duration, authToken))
    .then(activationResponse => {
        activationResponse.data.bundle = bundle;
        deferred.resolve(activationResponse);
    }).catch((error) => deferred.reject(error));

    return deferred.promise; 
}

function _getPermissionByAccessCode(accessCode, token) {
    var deferred = q.defer();
    
    const optionParams = {
        "url": peasConfig.domain + "/permissions?proof=" + accessCode,
        "method": 'GET',
        "headers": {
          'Authorization': token
        }
    };
    
    requestModule(optionParams, function (error, response, body) {
            
        if (error) {
            deferred.reject(_createErrorResponse("907", error, "_getPermissionByAccessCode"));
        } else {
            if(_isJson(body)) {
                let jsonBody = JSON.parse(body);
                if(jsonBody.data && Array.isArray(jsonBody.data) && jsonBody.data.length==1) {
                    if(jsonBody.data[0].proof && jsonBody.data[0].proof.toUpperCase() == accessCode.toUpperCase()) {
                        deferred.resolve({
                            "data" : jsonBody.data[0],
                            "token" : token
                        });    
                    } else {
                        deferred.reject(_createErrorResponse("907", jsonBody, "_getPermissionByAccessCode"));
                    }
                    
                } else {
                    deferred.reject(_createErrorResponse("907", jsonBody, "_getPermissionByAccessCode"));
                }

            } else {
                deferred.reject(_createErrorResponse("911", {response, body}, "_getPermissionByAccessCode"));
            }
        }
    });

    return deferred.promise;
}

function _createPermission(token, entitlementId) {
    
    var deferred = q.defer();
    
    const optionParams = {
        "url": peasConfig.domain + "/permissions",
        "method": 'POST',
        "headers": {
          'Authorization': token,
          'Content-Type': 'application/json'
        },
        "json" : true,
        "body" : {
            "entitlement_id" : entitlementId
        }
    };
    
    requestModule(optionParams, function (error, response, body) {
            
        if (error) {
            deferred.reject(_createErrorResponse("925", error, "_createPermission"));
        } else {
            if(typeof body === "object") {
                if(body.data && body.data.status==201) {
                    deferred.resolve({
                        "data" : body
                    });
                } else {
                    deferred.reject(_createErrorResponse("925", body, "_createPermission"));
                }
            } else {
                deferred.reject(_createErrorResponse("911", {response, body}, "_createPermission"));
            }
        }
    });

    return deferred.promise;   
}

function _updatePermission(options) {
    
    var deferred = q.defer();
    
    var form = {};

    if(options.hasOwnProperty("expired_at")) form.expired_at = options.expired_at;

    const optionsParams = {
        "url": peasConfig.domain + "/permissions/" + options.permissionId,
        "method": 'PUT',
        "headers": {
            'Authorization': options.token,
            'Content-Type': 'application/json'
        },
        "json" : true,
        "body" : form
    };
    
    requestModule(optionsParams, function (error, response, body) {
            
        if (error) {
            deferred.reject(_createErrorResponse("925", error, "_updatePermission"));
        } else {
            if(typeof body === "object") {
                if(body.data && body.data.status==200) {
                    deferred.resolve({
                        "status": "success",
                        "data" : body
                    });
                } else {
                    deferred.reject(_createErrorResponse("925", error, "_updatePermission"));
                }
            } else {
                deferred.reject(_createErrorResponse("911", {response, body}, "_updatePermission"));
            }   
        }
    });

    return deferred.promise;
}

function _getProductById(productId, token) {
    var deferred = q.defer();
    
    const optionParams = {
        "url": peasConfig.domain + "/products/" + productId,
        "method": 'GET',
        "headers": {
          'Authorization': token
        }
    };
    
    requestModule(optionParams, function (error, response, body) {
            
        if (error) {
            deferred.reject(_createErrorResponse("912", error, "_getProductById"));
        } else {

            if(_isJson(body)) {
                let jsonBody = JSON.parse(body);
                deferred.resolve({
                    "data" : jsonBody,
                    "token" : token
                });
            } else {
                deferred.reject(_createErrorResponse("911", {response, body}, "_getProductById"));
            }            
        }
    });

    return deferred.promise;
}

function _getUserActivations(options = {}, entitlementId, token) {
    var deferred = q.defer();
    
    const optionParams = {
        "url": peasConfig.domain + "/activations",
        "method": 'GET',
        "headers": {
          'Authorization': token
        }
    };

    let isActive = options["is_active"]!=undefined ? options["is_active"] : undefined;
    delete options["is_active"];

    let {metadata, ...getParams} = options;

    optionParams.url = _addGetParamstoUrl(optionParams.url, getParams); 

    requestModule(optionParams, function (error, response, body) {
            
        if (error) {
            deferred.reject(_createErrorResponse("908", error, "_getUserActivations"));
        } else {
            if(_isJson(body)) {

                let productActivations = JSON.parse(body).data;
                if(isActive) {
                    let currentDate = new Date(); 
                    productActivations = productActivations.filter((item) => {
                       let itemDate = new Date(item.ended_at);
                       let expiredAt = item.permission.expired_at;
                       if(currentDate.getTime() < itemDate.getTime() && (!expiredAt || (new Date(expiredAt)).getTime() > currentDate.getTime())) {
                           return true;
                       }
                    });
                }

                if(entitlementId) {
                    productActivations = productActivations.filter(item => item.permission["entitlement_id"] == entitlementId);
                }

                if(metadata) {
                    productActivations = productActivations.filter(item => {
                        if(item.permission && item.permission.entitlement && item.permission.entitlement.product && item.permission.entitlement.product.metadata && item.permission.entitlement.product.metadata.meta) {
                            return item.permission.entitlement.product.metadata.meta[metadata.key] == metadata[metadata.key];
                        }
                    });    
                }

                deferred.resolve(productActivations);    
            } else {

                deferred.reject(_createErrorResponse("911", {response, body}, "_getUserActivations"));
            }
        }
    });

    return deferred.promise;
}


function _validateAccessCode(permission, bundle, userActivations, optionParams) {
    
    let validationResult = {
        "valid" : true
    };
    let errorObject = {};
    // Is the Access code valid
    if(!permission["is_active"] || (permission.expired_at && (new Date(permission.expired_at)).getTime() < (new Date()).getTime())) {
        validationResult.valid = false;
        errorObject.code = "905";  
    }

    // Check Bundle Release date
    if(validationResult.valid) {
        if(!bundle["release_date"]) {
            validationResult.valid = false;
            errorObject.code = "914";
            errorObject.message = "Sorry, " + bundle.umbrella_product_name + " is not available yet. Please keep your activation code safe and use it later";
        } else if(bundle["release_date"] > (new Date).getTime()) {
            validationResult.valid = false;
            errorObject.code = "913";
            let date = new Date(bundle["release_date"]);
            let dateFormat = ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1))) + '/' + ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) + '/' + date.getFullYear();
            errorObject.message = "Sorry, " + bundle.umbrella_product_name + " is not available yet. Please keep your activation code safe and use it after " + dateFormat;
        }
    }

    // Has the Access code already been consumed by a particular C1 (Gigya) user
    if(validationResult.valid && permission.activations && permission.limit <= permission.activations.length) {
        validationResult.valid = false;
        errorObject.code = "902";
    }

    // Has the user already consumed another access code for the same product
    if(validationResult.valid && userActivations && userActivations.length) {
        validationResult.valid = false;
        errorObject.code = "901";
    }

    // Is the Access code valid for Student or Teacher
    if(validationResult.valid && bundle.type !=="both"  &&  bundle.type !== optionParams.type) {
        validationResult.valid = false;
        errorObject.code = "903";
    }

    if(!validationResult.valid) {
        errorObject["validation-fields"] = {
            "is_active" : permission["is_active"],
            "expired_at" : permission.expired_at,
            "release_date" : bundle["release_date"],
            "limit" : permission.limit,
            "activations" : (userActivations || []).length,
            "type" : bundle.type
        };
        errorObject.bundle = {"id" : bundle.id, "name": bundle.name, "title" : bundle.umbrella_product_name, "isbns" : bundle.products.map(({id}) => id)};
        validationResult.error = errorObject;
    }

    return validationResult;
}

function _activateProduct(userId, permissionId, duration, token) {
    var deferred = q.defer();

    let d = new Date();
    let activatedAt = d.getUTCFullYear().toString()+"-"+((d.getUTCMonth()+1).toString().length==2?(d.getUTCMonth()+1).toString():"0"+(d.getUTCMonth()+1).toString())+"-"+(d.getUTCDate().toString().length==2?d.getUTCDate().toString():"0"+d.getUTCDate().toString())+" "+(d.getUTCHours().toString().length==2?d.getUTCHours().toString():"0"+d.getUTCHours().toString())+":"+((parseInt((d.getUTCMinutes()/5)*5)).toString().length==2?(parseInt((d.getUTCMinutes()/5)*5)).toString():"0"+(parseInt((d.getUTCMinutes()/5)*5)).toString())+":00";
    d= new Date(d.getTime() + duration * 24 * 60 * 60 * 1000);
    let endedAt = d.getUTCFullYear().toString()+"-"+((d.getUTCMonth()+1).toString().length==2?(d.getUTCMonth()+1).toString():"0"+(d.getUTCMonth()+1).toString())+"-"+(d.getUTCDate().toString().length==2?d.getUTCDate().toString():"0"+d.getUTCDate().toString())+" "+(d.getUTCHours().toString().length==2?d.getUTCHours().toString():"0"+d.getUTCHours().toString())+":"+((parseInt((d.getUTCMinutes()/5)*5)).toString().length==2?(parseInt((d.getUTCMinutes()/5)*5)).toString():"0"+(parseInt((d.getUTCMinutes()/5)*5)).toString())+":00";

    const optionParams = {
        "url": peasConfig.domain + "/activations/?user_id=" + userId + "&permission_id=" + permissionId + "&ended_at=" + endedAt + "&activated_at=" + activatedAt,
        "method": 'POST',
        "headers": {
          'Authorization': token
        }
    };
    
    requestModule(optionParams, function (error, response, body) {
            
        if (error) {
            deferred.reject(_createErrorResponse("909", error, "_activateProduct"));
        } else {
            if(_isJson(body)) {
                deferred.resolve({
                    "status" : "success",
                    "data" : JSON.parse(body).data
                });    
            } else {
                deferred.reject(_createErrorResponse("911", {response, body}, "_activateProduct"));
            }
        }
    });
    return deferred.promise;   
}

function _getProducts(options = {}, token) {
    var deferred = q.defer();
    
    const optionsParams = {
        "url": peasConfig.domain + "/products",
        "method": 'GET',
        "headers": {
          'Authorization': token
        }
    };
    optionsParams.url = _addGetParamstoUrl(optionsParams.url, options);
    
    requestModule(optionsParams, function (error, response, body) {
            
        if (error) deferred.reject(_createErrorResponse("915", error, "_getProducts"));
        else if(_isJson(body)) {
            let jsonBody = JSON.parse(body);
            if(jsonBody.data && Array.isArray(jsonBody.data)) deferred.resolve({"data" : jsonBody});
            else deferred.reject(_createErrorResponse("915", body, "_getProducts"));
        } else deferred.reject(_createErrorResponse("911", {response, body}, "_getProducts"));
    });

    return deferred.promise;
}

function _getProduct(options = {}, token) {
    var deferred = q.defer();
    
    const optionsParams = {
        "url": peasConfig.domain + "/products/" + options.productId,
        "method": 'GET',
        "headers": {
          'Authorization': token
        }
    };
    
    requestModule(optionsParams, function (error, response, body) {
            
        if (error) deferred.reject(_createErrorResponse("915", error, "_getProduct"));
        else if(_isJson(body)) {
            let jsonBody = JSON.parse(body);
            if(jsonBody) deferred.resolve({"data" : jsonBody});
            else deferred.reject(_createErrorResponse("915", body, "_getProduct"));
        } else deferred.reject(_createErrorResponse("911", {response, body}, "_getProduct"));
    });

    return deferred.promise;
}

function _getBatch(options = {}, token) {
    var deferred = q.defer();
    
    const optionsParams = {
        "url": peasConfig.domain + "/batches/" + options.batchId,
        "method": 'GET',
        "headers": {
          'Authorization': token
        }
    };
    
    requestModule(optionsParams, function (error, response, body) {
            
        if (error) deferred.reject(_createErrorResponse("915", error, "_getBatch"));
        else if(_isJson(body)) {
            let jsonBody = JSON.parse(body);
            if(jsonBody) deferred.resolve({"data" : jsonBody});
            else deferred.reject(_createErrorResponse("915", body, "_getBatch"));
        } else deferred.reject(_createErrorResponse("911", {response, body}, "_getBatch"));
    });

    return deferred.promise;
}

function _getEntitlements(options = {}, token) {
    var deferred = q.defer();
    
    let entitlementId = options.id;
    delete options.id;

    const optionsParams = {
        "url": peasConfig.domain + "/entitlements",
        "method": 'GET',
        "headers": {
          'Authorization': token
        }
    };
    if(entitlementId) optionsParams.url += "/" + entitlementId;
    optionsParams.url = _addGetParamstoUrl(optionsParams.url, options);
    
    requestModule(optionsParams, function (error, response, body) {
            
        if (error) deferred.reject(_createErrorResponse("916", error, "_getEntitlements"));
        else if(_isJson(body)) {
            let jsonBody = JSON.parse(body);
            if(jsonBody.data && Array.isArray(jsonBody.data)) deferred.resolve({"data" : jsonBody});
            else if(entitlementId && jsonBody.id) deferred.resolve({"data" : {"total": 1, "perPage": 20, "page": 1, "lastPage": 1,"data": [jsonBody]}}); 
            else if(entitlementId && jsonBody.data && jsonBody.data.status === 404) deferred.resolve({"data" : {"total": 0, "perPage": 20, "page": 1, "lastPage": 0,"data": []}}); // no matching entitlement
            else deferred.reject(_createErrorResponse("916", body, "_getEntitlements"));
        } else deferred.reject(_createErrorResponse("911", {response, body}, "_getEntitlements"));
    });

    return deferred.promise;
}

function _getBatches(options = {}, token) {
    var deferred = q.defer();
    
    const optionsParams = {
        "url": peasConfig.domain + "/batches",
        "method": 'GET',
        "headers": {
          'Authorization': token
        }
    };
    optionsParams.url = _addGetParamstoUrl(optionsParams.url, options);
    
    requestModule(optionsParams, function (error, response, body) {
            
        if (error) deferred.reject(_createErrorResponse("917", error, "_getBatches"));
        else if(_isJson(body)) {
            let jsonBody = JSON.parse(body);
            if(jsonBody.data && Array.isArray(jsonBody.data)) deferred.resolve({"data" : jsonBody});
            else deferred.reject(_createErrorResponse("917", body, "_getBatches"));
        } else deferred.reject(_createErrorResponse("911", {response, body}, "_getBatches"));
    });

    return deferred.promise;
}

function _getPermissions(options = {}, token) {
    var deferred = q.defer();
    
    const optionsParams = {
        "url": peasConfig.domain + "/permissions",
        "method": 'GET',
        "headers": {
          'Authorization': token
        }
    };
    optionsParams.url = _addGetParamstoUrl(optionsParams.url, options);
    
    requestModule(optionsParams, function (error, response, body) {
            
        if (error) deferred.reject(_createErrorResponse("930", {error, response, body}, "_getPermissions"));
        else if(_isJson(body)) {
            let jsonBody = JSON.parse(body);
            if(jsonBody.data && Array.isArray(jsonBody.data)) deferred.resolve({"data" : jsonBody});
            else deferred.reject(_createErrorResponse("930", {response, body}, "_getPermissions"));
        } else deferred.reject(_createErrorResponse("911", {response, body}, "_getPermissions"));
    });

    return deferred.promise;
}

// _createProduct({token: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOjIsImlhdCI6MTU5MTYyMTU0NSwiZXhwIjoxNTkxNjI4NzQ1fQ.iP5Jug1YSmLO2UA18pKPJOS2X0-r-DgoGGDr0rH6VhE"});

function _createProduct(product, token) {

    var deferred = q.defer();
    
    var form = {
        "metadata" : JSON.stringify(product.metadata)    
    };

    const optionsParams = {
        "url": peasConfig.domain + "/products",
        "method": 'POST',
        "headers": {
            'Authorization': token
        },
        "form" : form       
    };
    
    requestModule(optionsParams, function (error, response, body) {
            
        if (error) {
            deferred.reject(_createErrorResponse("919", error, "_createProduct"));
        } else {
            
            if(_isJson(body)) {
                let jsonBody = JSON.parse(body);
                if(jsonBody.data && jsonBody.data.status==201) {
                    deferred.resolve({
                        "status": "success",
                        "data" : jsonBody
                    });    
                } else {
                    deferred.reject(_createErrorResponse("919", error, "_createProduct"));
                }
            } else {
                deferred.reject(_createErrorResponse("911", {response, body}, "_createProduct"));
            }
        }
    });

    return deferred.promise;
}

function _updateProduct(product, token) {

    var deferred = q.defer();
    
    var form = {
        "metadata" : JSON.stringify(product.metadata)
    };

    const optionsParams = {
        "url": peasConfig.domain + "/products/" + product.id,
        "method": 'PUT',
        "headers": {
            'Authorization': token
        },
        "form" : form
    };
    
    requestModule(optionsParams, function (error, response, body) {
            
        if (error) {
            deferred.reject(_createErrorResponse("920", error, "_updateProduct"));
        } else {
            
            if(_isJson(body)) {
                let jsonBody = JSON.parse(body);
                if(jsonBody.data && jsonBody.data.status==200) {
                    deferred.resolve({
                        "status": "success",
                        "data" : jsonBody
                    });    
                } else {
                    deferred.reject(_createErrorResponse("920", error, "_updateProduct"));
                }
            } else {
                deferred.reject(_createErrorResponse("911", {response, body}, "_updateProduct"));
            }
        }
    });

    return deferred.promise;
}

function _deleteProduct(product, token) {
    var deferred = q.defer();

    const optionsParams = {
        "url": peasConfig.domain + "/products/" + product.id,
        "method": 'DELETE',
        "headers": {
            'Authorization': token,
            'Content-Type': 'application/json'
        }
    };
    
    requestModule(optionsParams, function (error, response, body) {
            
        if (error) {
            deferred.reject(_createErrorResponse("921", error, "_deleteProduct"));
        } else {
            
            if(_isJson(body)) {
                let jsonBody = JSON.parse(body);
                if(jsonBody.data && jsonBody.data.status==200) {
                    deferred.resolve({
                        "status": "success",
                        "data" : jsonBody
                    });    
                } else {
                    deferred.reject(_createErrorResponse("921", error, "_deleteProduct"));
                }

            } else {
                deferred.reject(_createErrorResponse("911", {response, body}, "_deleteProduct"));
            }
        }
    });

    return deferred.promise;
}

function _createEntitlement(options) {
    
    var deferred = q.defer();
    
    var form = {
        "metadata" : JSON.stringify({
            "CreationDate" : options.CreationDate,
            "Duration" : options.Duration,
            "Visibility" : options.Visibility,
            "Type": options.Type,
            "QACheck": options.QACheck,
            "EndOfYearBreakPoint": options.EndOfYearBreakPoint,
            "EndOfYearOffset": options.EndOfYearOffset,
            "UsageMax": options.UsageMax,
            "LimitActivation": options.LimitActivation,
            "Demo": options.Demo,
            "ReleaseEveryNYears": options.ReleaseEveryNYears,
            "StaffID": options.StaffID,
            "Active": options.Active,
            "CMS_Notes" : options.CMS_Notes
        }),
        "entitlement_type_id" : options.entitlement_type_id,
        "product_id" : options.product_id
    };

    const optionsParams = {
        "url": peasConfig.domain + "/entitlements",
        "method": 'POST',
        "headers": {
            'Authorization': options.token
        },
        "form" : form
    };
    
    requestModule(optionsParams, function (error, response, body) {
            
        if (error) {
            deferred.reject(_createErrorResponse("922", error, "_createEntitlement"));
        } else {
            
            if(_isJson(body)) {
                let jsonBody = JSON.parse(body);
                if(jsonBody.data && jsonBody.data.status==201) {                    
                    deferred.resolve({
                        "status": "success",
                        "data" : jsonBody
                    });    
                } else {
                    deferred.reject(_createErrorResponse("922", error, "_createEntitlement"));
                }
            } else {
                deferred.reject(_createErrorResponse("911", {response, body}, "_createEntitlement"));
            }
        }
    });

    return deferred.promise;
}

function _updateEntitlement(options) {
    
    var deferred = q.defer();
    
    var form = {
        "metadata" : JSON.stringify({
            "CreationDate" : options.CreationDate,
            "Duration" : options.Duration,
            "Visibility" : options.Visibility,
            "Type": options.Type,
            "QACheck": options.QACheck,
            "EndOfYearBreakPoint": options.EndOfYearBreakPoint,
            "EndOfYearOffset": options.EndOfYearOffset,
            "UsageMax": options.UsageMax,
            "LimitActivation": options.LimitActivation,
            "Demo": options.Demo,
            "ReleaseEveryNYears": options.ReleaseEveryNYears,
            "StaffID": options.StaffID,
            "Active": options.Active,
            "CMS_Notes" : options.CMS_Notes
        }),
        "entitlement_type_id" : options.entitlement_type_id,
        "product_id" : options.product_id
    };

    const optionsParams = {
        "url": peasConfig.domain + "/entitlements/" + options.entitlementId,
        "method": 'PUT',
        "headers": {
            'Authorization': options.token
        },
        "form" : form
    };
    
    requestModule(optionsParams, function (error, response, body) {
            
        if (error) {
            deferred.reject(_createErrorResponse("923", error, "_updateEntitlement"));
        } else {
            
            if(_isJson(body)) {
                let jsonBody = JSON.parse(body);                
                if(jsonBody.data && jsonBody.data.status==200) {
                    deferred.resolve({
                        "status": "success",
                        "data" : jsonBody
                    });    
                } else {
                    deferred.reject(_createErrorResponse("923", error, "_updateEntitlement"));
                }
            } else {
                deferred.reject(_createErrorResponse("911", {response, body}, "_updateEntitlement"));
            }
        }
    });

    return deferred.promise;
}

function _createBatch(options) {
    
    var deferred = q.defer();
    
    var form = {
        "entitlement_id": options.entitlement_id,
        "proof_pattern_id": options.proof_pattern_id,
        "admin_id": options.admin_id,
        "name": options.name,
        "total_codes": options.total_codes,
        "limit": options.limit,
        "is_active": options.is_active
    };

    const optionsParams = {
        "url": peasConfig.domain + "/batches",
        "method": 'POST',
        "headers": {
            'Authorization': options.token,
            'Content-Type': 'application/json'
        },
        "json" : true,
        "body" : form
    };
    
    requestModule(optionsParams, function (error, response, body) {
        if (error) {
            deferred.reject(_createErrorResponse("924", error, "_createBatch"));
        } else {
            if(typeof body === "object") {
                if(body.data && body.data.status==201) {
                    deferred.resolve({
                        "status": "success",
                        "data" : body
                    });    
                } else {
                    deferred.reject(_createErrorResponse("924", error, "_createBatch"));
                }
            } else {
                deferred.reject(_createErrorResponse("911", {response, body}, "_createBatch"));
            }               
            
        }
    });

    return deferred.promise;
}

function _updateBatch(options) {
    
    var deferred = q.defer();
    
    var form = {};

    if(options.name) form.name = options.name;
    if(options.hasOwnProperty("expired_at")) form.expired_at = options.expired_at;

    const optionsParams = {
        "url": peasConfig.domain + "/batches/" + options.batchId,
        "method": 'PUT',
        "headers": {
            'Authorization': options.token,
            'Content-Type': 'application/json'
        },
        "json" : true,
        "body" : form
    };
    
    requestModule(optionsParams, function (error, response, body) {
            
        if (error) {
            deferred.reject(_createErrorResponse("925", error, "_updateBatch"));
        } else {
            if(typeof body === "object") {
                if(body.data && body.data.status==200) {
                    deferred.resolve({
                        "status": "success",
                        "data" : body
                    });
                } else {
                    deferred.reject(_createErrorResponse("925", error, "_updateBatch"));
                }
            } else {
                deferred.reject(_createErrorResponse("911", {response, body}, "_updateBatch"));
            }
            
        }
    });

    return deferred.promise;
}

function _updateActivation(id, formObject, token) {
    
    var deferred = q.defer();
    
    const optionsParams = {
        "url": peasConfig.domain + "/activations/" + id,
        "method": 'PUT',
        "headers": {
            'Authorization': token,
            'Content-Type': 'application/json'
        },
        "json" : true,
        "body" : formObject
    };
    
    requestModule(optionsParams, function (error, response, body) {
            
        if (error) {
            deferred.reject(_createErrorResponse("927", {error, response, body}, "_updateActivation"));
        } else {
            if(typeof body === "object") {
                if(body.data && body.data.status==200) {
                    deferred.resolve({
                        "status": "success",
                        "data" : body
                    });
                } else {
                    deferred.reject(_createErrorResponse("927", {response, body}, "_updateActivation"));
                }
            } else {
                deferred.reject(_createErrorResponse("911", {response, body}, "_updateActivation"));
            }
            
        }
    });

    return deferred.promise;
}

function _createNewPermission(options) {
    
    var deferred = q.defer();
    
    var form = {
        "token" : options.token,
        "entitlement_id" : options.entitlement_id,
        "batch_id" : options.batch_id,
        "proof" : options.proof,
        "limit": options.limit,
        "is_active": options.is_active,
        "expired_at" : options.expired_at,
        "released_at" : options.released_at
    };

    const optionsParams = {
        "url": peasConfig.domain + "/permissions",
        "method": 'POST',
        "headers": {
            'Authorization': options.token,
            'Content-Type': 'application/json'
        },
        "json" : true,
        "body" : form
    };
    
    requestModule(optionsParams, function (error, response, body) {
            
        if (error) {
            deferred.reject(_createErrorResponse("926", error, "_createNewPermission"));
        } else {            
            if(typeof body === "object") {
                if(body.data && body.data.status==201) {
                    deferred.resolve({
                        "status": "success",
                        "data" : body
                    });
                } else {
                    deferred.reject(_createErrorResponse("926", error, "_createNewPermission"));
                }
            } else {
                deferred.reject(_createErrorResponse("911", {response, body}, "_createNewPermission"));
            }
        }
    });

    return deferred.promise;
}

function _getErrorCodes() {
    var error = {
        "901" :  {
            "field" : "activations",
            "message" : "You have already activated this product",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },        
        "902" : {
            "field" : "limit",
            "message" : "Access Code limit has reached",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "903" : {
            "field" : "type",
            "message" : "Product is not valid for this category (User Type Mismatch)",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "904" : {
            "field" : "released_at",
            "message" : "Failure PEAS release date",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "905" : {
            "field" : "is_active",
            "message" : "Product has not active status of permission",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "906" : {
            "message" : "Something went wrong while authenticating the user. Please try again later.",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "907" : {
            "message" : "Something went wrong while fetching the permissions. Access Code might be incorrect.",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "908" : {
            "message" : "Something went wrong while fetching user activations. Please try again later.",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "909" : {
            "message" : "PEAS Services are down. Unable to activate product",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "910" : {
            "message" : "Error while fetching bundle info",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "911" : {
            "message" : "PEAS Services are down. Please try again later.",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_COMMUNICATION_ERROR
        },
        "912" : {
            "message" : "Something went wrong while fetching the product info. Please try again later.",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "913" : {
            "message" : "Sorry, bundle is not available yet. Please keep your activation code safe and use it later",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "914" : {
            "message" : "Sorry, bundle is not available yet. Please keep your activation code safe and use it later",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "915" : {
            "message" : "Something went wrong while fetching the products. Please try again later.",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "916" : {
            "message" : "Something went wrong while fetching the entitlements. Please try again later.",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "917" : {
            "message" : "Something went wrong while fetching the batches. Please try again later.",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "918" : {
            "message" : "No Product found corresponding to this key",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "919" : {
            "message" : "Something went wrong while creating the product. Please try again later.",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "920" : {
            "message" : "Something went wrong while updating the product. Please try again later.",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "921" : {
            "message" : "Something went wrong while deleting the product. Please try again later.",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "922" : {
            "message" : "Something went wrong while creating entitlement. Please try again later.",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "923" : {
            "message" : "Something went wrong while updating entitlement. Please try again later.",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "924" : {
            "message" : "Something went wrong while creating batch. Please try again later.",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "925" : {
            "message" : "Something went wrong while updating batch. Please try again later.",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "926" : {
            "message" : "Something went wrong while creating permission. Please try again later.",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "927" : {
            "message" : "Something went wrong while updating activation. Please try again later.",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "928" : {
            "message" : "No matching subscriptions found for user",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        },
        "929" : {
            "message" : "Unauthorised Access. Credentials might not be valid.",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_COMMUNICATION_ERROR
        },
        "930" : {
            "message" : "Something went wrong while fetching the permissions. Please try again later.",
            "tag" : appConstants.APP.ERROR_TYPES.PEAS.PEAS_WORKFLOW_ERROR
        }
    }
    return error;
}

function _createErrorResponse(code, error, functionName, errorObjectExtension) {
    var errorObject = {
        "status" : "error",
        "error" : {
            "code" : code,
            "message": ERROR_CODES_INFO[code].message,
            "tag" : ERROR_CODES_INFO[code].tag,
            "details" : error,
            "info" : {
                "fn-name" : functionName    
            }
        }
    };

    if(errorObjectExtension) errorObject.error = {...errorObject.error, ...errorObjectExtension};

    return errorObject;    
}

function _isJson(data) {
    try {
        JSON.parse(data);
    } catch (e) {
        return false;
    }
    return true;
}

function _addGetParamstoUrl(baseUrl, params) {
    let counter = 0;
    for(const key in params) {
        baseUrl += counter ? "&" : "?";
        baseUrl += key + "=" + params[key];
        ++counter;
    }
    return baseUrl;
}