/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/
'use strict';
/************************************
* Internal npm Modules
************************************/

/************************************
* External npm Modules
************************************/
var AWS = require('aws-sdk');
const config = require('./../../../server/config');

/**
 * Send sign request to LTI TOOL Gateway
 */
class LtiToolGwAPIUtils {
    constructor() {
        this._credentials = {
            accessKeyId: config.app.ltiTool.gatewayToolAPIGateway.awsConfig.accessKeyId,
            secretAccessKey: config.app.ltiTool.gatewayToolAPIGateway.awsConfig.secretAccessKey
        };
        this._region = config.app.ltiTool.gatewayToolAPIGateway.awsConfig.region;
        this._domain = config.app.ltiTool.gatewayToolAPIGateway.domain;
        this._endpoint = new AWS.Endpoint(this._domain);
        this._client = new AWS.HttpClient();
    }

    signedRequest(method, route, headers, body) {
        let request = new AWS.HttpRequest(this._endpoint, this._region);
        request.method = method;
        request.path += config.app.ltiTool.gatewayToolAPIGateway.basePath + route;
        request.headers['host'] = this._domain;
        if (headers.contentType) {
            request.headers['Content-Type'] = headers.contentType;
        }
        if (headers.traceid)
            request.headers['x-amzn-trace-id'] = headers.traceid;
        //Convert body to string if not stringified already
        if (body && !(typeof body === 'string' || body instanceof String)) {
            request.body = JSON.stringify(body);
        }
        //Sign request
        let signer = new AWS.Signers.V4(request, 'execute-api');
        signer.addAuthorization(this._credentials, new Date());
        return new Promise((resolve, reject) => {
            let clientRequest = this._client.handleRequest(request, null, function (response) {
                console.log(response.statusCode + ' ' + response.statusMessage);
                var responseBody = '';
                response.on('data', (chunk) => { responseBody += chunk; });
                response.on('end', () => { 
                        if(response.statusCode != 200) {
                            try {
                                let parsedResponse = JSON.parse(responseBody);
                                reject(parsedResponse);
                            } catch (err) {
                                reject(responseBody);
                            }
                        } else {
                            resolve(responseBody);
                        }
                });
            }, function (error) { reject(error); });
            clientRequest.setSocketKeepAlive(true);
        });

    }

}

exports.ltiToolGwAPIUtils = new LtiToolGwAPIUtils();
