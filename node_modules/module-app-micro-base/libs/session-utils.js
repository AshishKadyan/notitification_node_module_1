/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/
 
/**********************************************************************
 * Provides session utility functions to be used across App
 ***********************************************************************/ 
'use strict';

/************************************
 * Internal npm Modules
 ************************************/
const appConstants = require('./../libs/app-constants');
const config = require('./../../../server/config');
const appUtils = require('./../libs/app-utils');
const logger = require('./../libs/logging');

/************************************
 * Module exports / Public functions
 ************************************/
exports.getTokenFromSession = getTokenFromSession;
exports.initializeComproDLS = initializeComproDLS;

/************************************
* External npm Modules
************************************/
const ComproDLS = require('comprodls-sdk');

/*********************************
 * Public Function Definitions
 *********************************/

//Function to get comproDLS token Object from session
async function getTokenFromSession(req,spaceId) {
    try {
        if(req.session[spaceId]) {
            const token = {
                "access_token" : req.session[spaceId].accessToken, //Access token
            };
            return token; 
        } else {
            syslog.error({req}, 'Token not found with session object being ' + typeof(req.session[spaceId]) + ' for space id ' + spaceId);
            const errorObj = { errorCode : appConstants.APP.ERROR_TYPES.TOKEN_NOT_FOUND, description : 'Token not found for space: ' + spaceId };
            throw errorObj;
        }
    } catch (error) {
        return Promise.reject(error)
    }
    
}


//Function to initialize comprodls object
//Pass optional spaceid param, if token needs to be set comprodls object
async function initializeComproDLS(req, spaceid, orgid) {
    try {
        let token;
        if (spaceid) {
            //Get user DLS token and orgid stored in session
            token = await getTokenFromSession(req, spaceid);
            orgid = orgid || req.session[spaceid].orgId;
        }
        let options = {
            ...(req.headers['x-amzn-trace-id'] && { traceid: req.headers['x-amzn-trace-id'] }),
            ...(orgid && { orgid }),
            ...(token && { token })
        }
        return ComproDLS.init(config.app.dlsEnv, config.app.dlsRealm, options);
    } catch (error) {
        return Promise.reject(error);
    }
}
