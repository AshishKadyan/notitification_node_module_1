/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/
 
/**********************************************************************
 * Provides request utility functions to be used across App
 ***********************************************************************/
'use strict'; 

/************************************
* Internal npm Modules
************************************/
const errorHandler = require('./../error/error-handler');
const redisConnectionHandler = require('./redis-connection');
const appConstants = require('./app-constants');
const config = require('./../../../server/config');
const authController = require('./../controllers/auth-controller');
// session utils
const sessionUtils = require('../libs/session-utils');
const logger = require('../libs/logging');
/************************************
 * Module exports / Public functions
 ************************************/
exports.isHttps = isHttps;
exports.isReqAuthenticated =  isReqAuthenticated;
exports.unAuthorizedUserReLogin = unAuthorizedUserReLogin;

/*********************************
 * Public Function Definitions
 *********************************/
// Function to check if request protocol is https
function isHttps (req) {   
    /*******
     *  We can't use req.protocol for detecting https requests on heroku as heroku load balancer changes the protocol before forwarding request to actual node server .
     *  Instead we need to check "x-forwarded-proto" header for detecting https requests on heroku
     *******/ 
    if (req.headers['x-forwarded-proto']) {
        if ( req.headers['x-forwarded-proto'] == 'https') {
            return true;
        }
    } else {
        if (req.protocol == 'https') {
            return true;
        } 
    }
    return false;    
}

/**
 * Middleware to Check for req authentication
 * if Query Params contains userData, revitalizing session of user
 * @param {*} req
 * @param {*} res
 * @param {*} next
 */
async function isReqAuthenticated (req, res, next) {
  try {
    if (!req.isAuthenticated()) {
      if(!redisConnectionHandler.redisConnected()){
        const errorMessage = "AUTHORIZATION-ERROR: Redis Unavailable, Request Path=" + req.path;
        errorHandler.handleError(req, res, {errorCode: errorMessage, statusCode: 500, customError: true }, { tag : appConstants.APP.ERROR_TYPES.REDIS });
      } else {
        if (req.query && req.query.userData) {
          // if the request contains 'userData' of unauthorized user try revitalizing session for the user.
          await unAuthorizedUserReLogin(req, res, next);
          //log session recreation call
          logger.logInfo(req, null, { "sessionRecreationTimestamp": new Date().getTime() }, {
            infoType: 'UNAUTHORIZED_SESSION_RECREATION',
            sendResponseToFrontend : false
          })
          next();
        } else {
          const errorMessage = "AUTHORIZATION-ERROR: Unauthorized request, Request Path=" + req.path;
          errorHandler.handleError(req, res, {errorCode: appConstants.APP.ERROR_TYPES.AUTHORIZATION_ERROR, statusCode: 401, customError: true, description: errorMessage }, { tag : appConstants.APP.ERROR_TYPES.AUTHORIZATION_ERROR });
        }
      }
    } else {
      if(req.headers && config.app.customReqHeaders && config.app.customReqHeaders.userRole && req.headers[config.app.customReqHeaders.userRole.key] && req.headers[config.app.customReqHeaders.userRole.key] != req.session.role) {
        const errObj = {
          statusCode : 401,
          errorCode: appConstants.APP.ERROR_TYPES.ROLE_MISMATCH
        }
        res.status(errObj.statusCode).send(errObj);
      } else {
        next();
      } 
    }
  } catch (error) {
    let errorTag = appConstants.APP.ERROR_TYPES.NODE_SERVER;
    if (error && error.tag) {
      errorTag = error.tag;
    }
    errorHandler.handleError(req, res, error, { tag: errorTag });
  }
}

/************************************
* Private functions
************************************/

/**
 * Find the role of the user and passport login the unauthorized user session.
 *
 * @param {*} req
 * @param {*} res
 * @param {*} next
 */
async function unAuthorizedUserReLogin(req, res, next) {
  try {
    let userSpaces;
    // User data from gigya is base64 encoded in 'req.query.userData'
    let userData = Buffer.from(decodeURIComponent(req.query.userData), 'base64').toString('utf-8');
    let user = JSON.parse(decodeURIComponent(userData));
    // check user role for admin & supportadmin
    if (user.samlData && (user.samlData.eltCustomerServices == "true" || user.samlData.eltSuperAdmin == "true" || user.samlData.eltSales == "true")) {
      user.role = "superadmin";
    } else if (user.role == 'teacher') {
      try {
        const comproDLS = await sessionUtils.initializeComproDLS(req);
        userSpaces = await comproDLS.Spaces(config.app.dlsAccountId).getUserSpaces({ extuserid: user.extUserId });
        if (userSpaces.count > 0 && authController.isUserAdmin(userSpaces)) {
          user.role = 'admin';
        }
      } catch (error) {
        error.tag = appConstants.APP.ERROR_TYPES.DLS_CORE;
        return Promise.reject(error);
      }
    }
    //Login into passport
    await authController.passportLogin(req, res, user);
    // provision user spaces in session
    await authController.getUserSpaces(req, res, next, userSpaces)
  } catch (error) {
    return Promise.reject(error);
  }
}
