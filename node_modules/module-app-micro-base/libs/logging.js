/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/

/*************************************
 * Application Logger
 **************************************/
'use strict';

/************************************
* External npm Modules
************************************/
const bunyan = require('bunyan');
const bformat = require('bunyan-format');

/************************************
* Internal npm Modules
************************************/
const appUtils = require('./../libs/app-utils');
const config = require('./../../../server/config');
/************************************
* Private Variables
************************************/
//Configure logging format
const formatOut = bformat({
    outputMode: 'short'
});
//Request serializer for bunyan logger
function reqSerializer(req) {
    const reqSerializerObj = {
        ...(req && {method: req.method}),
        ...(req && {url : req.url}),
        ...(req && req.session && {extUserId : req.session.extUserId})
    }

    if(config.app.orchestration === 'ECS' && req) {
        reqSerializerObj['x_amzn_trace_id'] = req.headers['x-amzn-trace-id'];
    }
    return reqSerializerObj;
}

//Error serializer for bunyan logger
function ctxSerializer(ctx) {
    return ctx && appUtils.getUserInfoObjFromReq(ctx.req);
}
// Option for logging
const loggerOptions = {
    name: 'web',
    stream: formatOut,
    level: 'info',
    serializers: {
        req: reqSerializer,
        ctx: ctxSerializer
    }
}

/************************************
* Module exports / Public functions
************************************/
exports.frontendInfoLoggger = frontendInfoLoggger;
exports.logInfo = logInfo;

/************************************
* Public functions definition
************************************/

//Remove stream option if app is run via AWS ECS
if(config.app.orchestration === 'ECS') {
    delete loggerOptions.stream;
}
//Create global syslog object.
global.syslog = bunyan.createLogger(loggerOptions);


//Function to log system events information from front end  
function frontendInfoLoggger(req,res) {
    let loggingInfoString = '';
    if(req.body.isUserInfoNeeded) {
        loggingInfoString = req.body.spaceId ? appUtils.getUserInfoFromReq(req, req.body.spaceId) : appUtils.getUserInfoFromReq(req);
        delete req.body.isUserInfoNeeded;
    }
    loggingInfoString += 'SOURCE=FRONTEND, ' + req.body.context + ', INFO=' + JSON.stringify(req.body);
    syslog.info({req}, loggingInfoString);
    res.send(true);
}

/**
 * Generic info Handler to logs info on server and optionally sends the response to frontend.
 * 
 * @param {*} req : express request object
 * @param {*} res : express response object - only needed for sending response to frontend
 * @param {*} info : info object for logging
 * @param {*} options : (optional) has following fields
 *                      - sendResponseToFrontend : set this to false if using this function for only logging purpose
 *                      - spaceId : needed for getting info from session
 *                      - infoType : a tag for information to be logged for easy search on kibana
 * 
 */
// To do - Refactoring for making this generic(few options are added to avoid regression in existing functions) - added in backlog
// Temporary making updates in function to extend this for logging information after errors to avoid code duplication

function logInfo(req, res, info, options = { sendResponseToFrontend : true}) {
    let infoString = options.spaceId ? appUtils.getUserInfoFromReq(req, options.spaceId) : appUtils.getUserInfoFromReq(req);
    if(options.infoType) {
        infoString += "Info Type=" + options.infoType
    } 
    infoString += ", INFO=" + JSON.stringify(info);

    //Log the info to server
    syslog.info({req} , infoString);

    if(options && options.sendResponseToFrontend) {
        const infoObject = {
            ...(info.success != undefined && {success : info.success}),
            ...(info.status && {status : info.status}),
            ...(info.error && {error : info.error}),
            ...(info.code && {code : info.code})
        }
        res.send(infoObject)
    }

}


  








