/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/


/**********************************************************************
 * Provides functions for getting class related data
 ***********************************************************************/
'use strict';

/************************************
* Internal npm Modules
************************************/
//app config
const config = require('./../../../server/config');
const sessionUtils = require('../libs/session-utils');
//Error Handler
const errorHandler = require("../error/error-handler");
//Get App Constants
const appConstants = require('../libs/app-constants');

/************************************
* External npm Modules
************************************/

/************************************
* Module exports / Public functions
************************************/

/************************************
* Public function definitions
************************************/
exports.enrichEventMW = enrichEventMW;

async function enrichEventMW(req, res, next) {
    if (!(req.body && req.body.data && req.body.feature === 'user-sessions')) return next();

    try {
        req.body.data = await getEnrichedEvents(req, res, next, true, req.body.data);
        return next();
    } catch (error) {
        return errorHandler.handleError(req, res, error, { tag: appConstants.APP.ERROR_TYPES.DLS_CORE });
    }
}

async function getEnrichedEvents(req, res, next, isFurtherComputationRequired = false, events = []) {
    await Promise.all(events.map(e => enrichContent(req, res, next, e.content)));

    if (isFurtherComputationRequired) return events;

    return res.end();
}

async function enrichContent(req, res, next, content) {

    if (!content) return;

    const org = (content.data && content.data.org) || (content.data && content.data.spaceId && getOrgId(req, content.data.spaceId)) || await getAllDlsOrgId(req);

    const additionalData = {
        sessionid: req.sessionID,
        org,
        ip: req.ip || req.headers['x-forwarded-for'] || req.connection.remoteAddress
    }

    content.data && delete content.data.spaceId;

    Object.assign(content.data, additionalData);
}

async function getAllDlsOrgId(req) {
    const spaces = await getUserSpaces(req);
    return spaces.entities.map(o => o.dls_org_id);
}

async function getUserSpaces(req) {
    const comproDLS = await sessionUtils.initializeComproDLS(req);
    const params = { extuserid: req.session.extUserId };
    return comproDLS.Spaces(config.app.dlsAccountId).getUserSpaces(params);
}

function getOrgId(req, spaceId) {
    return req.session[spaceId] && req.session[spaceId].orgId;
}