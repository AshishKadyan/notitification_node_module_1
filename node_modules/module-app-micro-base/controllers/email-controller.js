/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/


/**********************************************************************
 * Provides functions for sending email using ses
 ***********************************************************************/
'use strict';

/************************************
* Internal Modules
************************************/
//Get App Constants
const appConstants = require('../libs/app-constants');

/************************************
* External npm Modules
************************************/
// Error Handler
const errorHandler = require('./../error/error-handler');

const AWS = require('aws-sdk');

const emailOptions = {
    region: process.env.AWS_REGION,
    apiVersion: '2010-12-01'
};

const emailClient = new AWS.SES(emailOptions);

/************************************
* Module exports / Public functions
************************************/
exports.sendTemplateEmail = sendTemplateEmail;

/************************************
* Public function definitions
************************************/
async function sendTemplateEmail(req, res, next, isFurtherComputationsNeeded = false) {
    let emailParams;
    try {
        const templateId = `dls-${process.env.DLS_REALM}-${process.env.DLS_ENV}-${req.body.emailtype}`
        const templateData = {
            staticAssetsBasePath: process.env.STATIC_ASSETS_BASEPATH,
            appsBasepath: process.env.APPS_BASEPATH,
            ...req.body.templateOptions
        }
        emailParams = {
            Destination: {
                ToAddresses: req.body.receiverEmail
            },
            Source: 'Cambridge One <' + process.env.EMAIL_ADDRESS_GENERAL + '>',
            Template: templateId,
            TemplateData: JSON.stringify(templateData)
        };

        const response = await emailClient.sendTemplatedEmail(emailParams).promise();
        if (isFurtherComputationsNeeded) {
            return { success: true, response: response };
        } else {
            res.send(response);
        }
    } catch (error) {
        if (isFurtherComputationsNeeded) {
            errorHandler.handleError(req, res, error, { tag: appConstants.APP.ERROR_TYPES.EMAIL_ERROR.SES_EMAIL, isFurtherComputationsNeeded: true, errorInfo: { emailOptions: emailParams } });
            return { success: false, error: error };
        } else {
            errorHandler.handleError(req, res, error, { tag: appConstants.APP.ERROR_TYPES.EMAIL_ERROR.SES_EMAIL, errorInfo: { emailOptions: emailParams } });
        }
    }
}