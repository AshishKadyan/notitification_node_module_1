

/*************************************************************************
 *
 * COMPRO CONFIDENTIAL
 * __________________
 *
 *  [2015] - [2020] Compro Technologies Private Limited
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Compro Technologies Private Limited. The
 * intellectual and technical concepts contained herein are
 * proprietary to Compro Technologies Private Limited and may
 * be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Compro Technologies Pvt. Ltd..
 ***************************************************************************/


/**********************************************************************
 * Provides functions for accessing PEAS api
 ***********************************************************************/
'use strict';

/************************************
* Internal npm Modules
************************************/

const peasService = require('./../services/peas-service');
// this object is used for validation (data populates whenever corresponding calls are made (i.e, permission, activations, bundles), and then actual validation occurs in validateAccessCodes API)
var validationObject = {
    "data" : {},
    "validityTracker" : {}
};
//app config
/************************************
* External npm Modules
************************************/
let q = require('q');
/************************************
* Global Variables
************************************/


/************************************
* Module exports / Public functions
************************************/
exports.getPermissionByAccessCode = getPermissionByAccessCode;
exports.getProductByAccessCode = getProductByAccessCode;
exports.getBundleByAccessCode = getBundleByAccessCode;
exports.validateAccessCodeForUser = validateAccessCodeForUser;
exports.activateProduct = activateProduct;
exports.activateProductBySapId = activateProductBySapId;
exports.activateProductByMetadata = activateProductByMetadata;
exports.getUserActivations = getUserActivations;
exports.getUserEntitlements = getUserEntitlements;

exports.getProducts = getProducts;
exports.getProduct = getProduct;

exports.getEntitlements = getEntitlements;
exports.getBatches = getBatches;
exports.getBatch = getBatch;
exports.getPermissions = getPermissions;

//peas remaining APIs
exports.manageProduct = manageProduct;
exports.manageEntitlement = manageEntitlement;
exports.manageBatch = manageBatch;
exports.managePermission = managePermission;
exports.revokeProductByMetadata = revokeProductByMetadata;


/************************************
* Public function definitions
************************************/
/*
Get Permission corresponding to an Access Code using PEAS API
    @params - accessCode : "abcd-defgh"
*/
function getPermissionByAccessCode(accessCode) {
    var deferred = q.defer();

    peasService.getPermissionByAccessCode(accessCode)
    .then(({data}) => deferred.resolve({"status" : "success", data}))
    .catch(error => _rejectPromise(deferred, error, "getPermissionByAccessCode", {accessCode}));

    return deferred.promise;
}

/*
Get Product info corresponding to an Access Code using PEAS API
    @params - accessCode : "abcd-defgh"
*/
function getProductByAccessCode(accessCode) {
    var deferred = q.defer();

    peasService.getProductByAccessCode(accessCode)
    .then(({data}) => deferred.resolve({"status" : "success", data}))
    .catch(error => _rejectPromise(deferred, error, "getProductByAccessCode", {accessCode}));

    return deferred.promise;
}

/*
Get Bundle corresponding to an Access Code using PEAS API
    @params - accessCode : "abcd-defgh"
*/
function getBundleByAccessCode(accessCode) {
    var deferred = q.defer();

    peasService.getBundleByAccessCode(accessCode)
    .then(({data}) => deferred.resolve({"status" : "success", data}))
    .catch(error => _rejectPromise(deferred, error, "getBundleByAccessCode", {accessCode}));

    return deferred.promise;
}

/*
Validate  access code against user
    @params - optionParams = { "accessCode" : "abcd-defgh", "userId" : "234", "type" : "student" }
*/
function validateAccessCodeForUser(optionParams) {
    var deferred = q.defer();

    peasService.validateAccessCodeForUser(optionParams)
    .then(({data}) => deferred.resolve({"status" : "success", data}))
    .catch(error => _rejectPromise(deferred, error, "validateAccessCodeForUser", optionParams));

    return deferred.promise;
}


function getUserActivations(optionParams) {
    var deferred = q.defer();

    peasService.getUserActivations(optionParams)
    .then(({data}) => deferred.resolve({"status" : "success", data}))
    .catch(error => _rejectPromise(deferred, error, "getUserActivations", optionParams));

    return deferred.promise;
}

function getUserEntitlements(optionParams) {
    var deferred = q.defer();

    peasService.getUserEntitlements(optionParams)
    .then(({data}) => deferred.resolve({"status" : "success", data}))
    .catch(error => _rejectPromise(deferred, error, "getUserEntitlements", optionParams));

    return deferred.promise;
}
/*
Activate A Product using PEAS API
    @params - optionParams = { "accessCode" : "abcd-defgh", "userId" : "234", "type" : "student" }
*/
function activateProduct(optionParams) {
    var deferred = q.defer();

    peasService.activateProduct(optionParams)
    .then(({data}) => deferred.resolve({"status" : "success", data}))
    .catch(error => _rejectPromise(deferred, error, "activateProduct", optionParams));

    return deferred.promise;
}

function activateProductBySapId(optionParams) {
    var deferred = q.defer();

    peasService.activateProductByMetadata({...optionParams, "key" : "SAP_ID"})
    .then(({data}) => {
        deferred.resolve({"status" : "success", data});
    }).catch(error => _rejectPromise(deferred, error, "activateProductBySapId", optionParams));

    return deferred.promise;   
}

function activateProductByMetadata(optionParams) {
    var deferred = q.defer();

    peasService.activateProductByMetadata(optionParams)
    .then(({data}) => {
        deferred.resolve({"status" : "success", data});
    }).catch(error => _rejectPromise(deferred, error, "activateProductByMetadata", optionParams));

    return deferred.promise;   
}

/*
Get PEAS Products
*/
function getProducts(options) {
    var deferred = q.defer();

    peasService.getProducts(options)
    .then(({data}) => deferred.resolve({"status" : "success", data}))
    .catch(error => _rejectPromise(deferred, error, "getProducts", options));

    return deferred.promise;
}

/*
Get PEAS Product
*/
function getProduct(options) {
    var deferred = q.defer();

    peasService.getProduct(options)
    .then(({data}) => deferred.resolve({"status" : "success", data}))
    .catch(error => _rejectPromise(deferred, error, "getProduct", options));

    return deferred.promise;
}

/*
Get PEAS Batch
*/
function getBatch(options) {
    var deferred = q.defer();

    peasService.getBatch(options)
    .then(({data}) => deferred.resolve({"status" : "success", data}))
    .catch(error => _rejectPromise(deferred, error, "getBatch", options));

    return deferred.promise;
}

/*
Get PEAS Entitlements
*/
function getEntitlements(options) {
    var deferred = q.defer();

    peasService.getEntitlements(options)
    .then(({data}) => deferred.resolve({"status" : "success", data}))
    .catch(error => _rejectPromise(deferred, error, "getEntitlements", options));

    return deferred.promise;
}

/*
Get PEAS Batches
*/
function getBatches(options) {
    var deferred = q.defer();

    peasService.getBatches(options)
    .then(({data}) => deferred.resolve({"status" : "success", data}))
    .catch(error => _rejectPromise(deferred, error, "getBatches", options));

    return deferred.promise;
}

/*
Get PEAS Permissions
*/
function getPermissions(options) {
    var deferred = q.defer();

    peasService.getPermissions(options)
    .then(({data}) => deferred.resolve({"status" : "success", data}))
    .catch(error => _rejectPromise(deferred, error, "getPermissions", options));

    return deferred.promise;
}

function manageProduct(options) {
    var deferred = q.defer();

    peasService.manageProduct(options)
    .then(({data}) => deferred.resolve({"status" : "success", data}))
    .catch(error => _rejectPromise(deferred, error, "manageProduct", options));

    return deferred.promise;
}

function manageEntitlement(options) {
    var deferred = q.defer();

    peasService.manageEntitlement(options)
    .then(({data}) => deferred.resolve({"status" : "success", data}))
    .catch(error => _rejectPromise(deferred, error, "manageEntitlement", options));

    return deferred.promise;
}

function manageBatch(options) {
    var deferred = q.defer();

    peasService.manageBatch(options)
    .then(({data}) => deferred.resolve({"status" : "success", data}))
    .catch(error => _rejectPromise(deferred, error, "manageBatch", options));

    return deferred.promise;
}

function managePermission(options) {
    
    var deferred = q.defer();

    peasService.managePermission(options)
    .then(({data}) => deferred.resolve({"status" : "success", data}))
    .catch(error => _rejectPromise(deferred, error, "managePermission", options));

    return deferred.promise;

}

function revokeProductByMetadata(options) {
    
    var deferred = q.defer();

    peasService.revokeProductByMetadata(options)
    .then(({data}) => deferred.resolve({"status" : "success", data}))
    .catch(error => _rejectPromise(deferred, error, "revokeProductByMetadata", options));

    return deferred.promise;

}

/************************************
* Private function/variable definitions
************************************/

function _rejectPromise(deferred, error, functionName, inputParams) {
    error.error.info["caller-fn"] = functionName;
    inputParams ? delete inputParams.accessCode : "";
    error.error.info["input-params"] = inputParams;
    return deferred.reject(error);
}